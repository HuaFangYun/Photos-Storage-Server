@* Reusable component that allows user to choose album(s) to add selected items to *@
@using static PSS.Backend.Connection
<link href="/css/components/AlbumSelector.css" rel="stylesheet">

<div id="albumSelector" style="visibility: @AlbumsVis">

    <div id="header">
        <span>Add to</span>
        <div id="buttons">
            <button class="iconBtn" @onclick="CloseBtnClick"><span class="material-icons-outlined">close</span></button>
            <button class="iconBtn" @onclick="ConfirmBtnClick"><span class="material-icons-outlined">check</span></button>
        </div>
    </div>
    
    <div id="albumCreatorDiv"><AlbumCreator Albums="@(albums.Concat(folders).ToList())"/></div>

    <div class="albumsAndFolders">
        <span>Albums</span>
        <div class="albumsList">
            @for (int i = 0; i < albums.Count; i++)
            {
                int ii = i;
                <div @onclick="@(() => { checkedAlbums[ii] = !checkedAlbums[ii]; ClearFolderChecks(); checkedFolderIndex = -1; })" class="album">
                    <div class="coverDiv">
                        <img class="cover" src="@Settings.requestPath/@albums[i].albumCover" alt="">
                    </div>
                    <input type="checkbox" @bind="@checkedAlbums[ii]" @bind:event="oninput">
                    <span title="@albums[i].name">@albums[i].name</span>
                </div>
            }
        </div>
    
        <span>Folders</span>
        <div class="albumsList">
            @for (int i = 0; i < folders.Count; i++)
            {
                int ii = i;
                <div class="album" @onclick="@(() => { checkedFolderIndex = ii; ClearAlbumChecks(); ClearFolderChecks(); checkedFolders[ii] = true; })">
                    <div class="coverDiv">
                        <img class="cover" src="@Settings.requestPath/@folders[i].albumCover" alt="">
                    </div>
                    <input type="checkbox" @bind="@checkedFolders[ii]" @bind:event="oninput">
                    <span title="@folders[i].name">@folders[i].name</span>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private static List<Album> albums;
    private static List<Album> folders;

    private static List<bool> checkedAlbums;
    private static List<bool> checkedFolders;
    private static int checkedFolderIndex; //Which index in folders is checked (can only have 1 checked (true)).
    
    [Parameter] //Needs to be passed in
    public List<string> SelectedItems { get; set; } //Passed in from the page. Paths selected by user
    
    [Parameter]
    public EventCallback<int> SelectedItemsCountChanged { get; set; } //Used for clearing SelectedItems. https://blazor-university.com/components/two-way-binding/
    
    [Parameter] //Needs to be passed in
    public string HeaderVis { get; set; } //Passed in from the calling page. Visibility of the header that displays selected items count, misc buttons, etc.
    
    [Parameter]
    public EventCallback<string> HeaderVisChanged { get; set; } //Changing the passed in headerVis.
    
    [Parameter] //Needs to be passed in
    public string AlbumsVis { get; set; } //Visibility of the selector
    
    [Parameter]
    public EventCallback<string> AlbumsVisChanged { get; set; }
    
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    protected override void OnInitialized()
    {
        albums = GetAlbumsTable(true, false);
        folders = GetAlbumsTable(false, true);
        checkedAlbums = (from album in albums select new bool()).ToList();
        checkedFolders = (from album in albums select new bool()).ToList();
        checkedFolderIndex = -1; //-1 = a folder isn't picked
        AlbumsVis = "hidden";
        HeaderVis = "hidden";
    }

    //Closing the div for selecting album(s) to add selected items to.
    private async Task CloseBtnClick()
    {
        AlbumsVis = "hidden";
        await AlbumsVisChanged.InvokeAsync("hidden");
        ClearAlbumChecks();
        ClearFolderChecks();
    }
    
    private async Task ClearChecks()
    {
        foreach (string item in SelectedItems)
            await JSRuntime.InvokeAsync<string>("removeCheck", item);
        SelectedItems.Clear();
        AlbumsVis = "hidden";
        HeaderVis = "hidden";
        await SelectedItemsCountChanged.InvokeAsync(0);
        await HeaderVisChanged.InvokeAsync("hidden");
    }

    private static void ClearAlbumChecks()
    {
        for (int i = 0; i < checkedAlbums.Count; i++) checkedAlbums[i] = false;
    }

    private static void ClearFolderChecks()
    {
        for (int i = 0; i < checkedFolders.Count; i++) checkedFolders[i] = false;
    }

    //Add item(s) to album(s) or folder selected.
    private async void ConfirmBtnClick()
    {
        if (checkedFolderIndex != -1) //If a folder is selected this won't be -1
            foreach (string item in SelectedItems) AddToAlbum(item, folders[checkedFolderIndex].id);
        else
        {
            for (int c = 0; c < checkedAlbums.Count; c++)
            {
                if (checkedAlbums[c] == false) continue;

                foreach (string item in SelectedItems)
                    AddToAlbum(item, albums[c].id);
            }
        }
        await CloseBtnClick();
        await ClearChecks();
    }
}