@* Reusable component that allows user to choose album(s) to add selected items to *@
@using static PSS.Backend.Connection
<link href="/css/components/AlbumSelector.css" rel="stylesheet">

<div id="albumSelector" style="visibility: @AlbumsVis">
     <button class="iconBtn" id="closeBtn" @onclick="CloseBtnClick"><span class="material-icons-outlined">close</span></button>
     <button class="iconBtn" id="confirmBtn" @onclick="ConfirmBtnClick"><span class="material-icons-outlined">check</span></button>
     <span id="addToText">Add to</span>
     <div id="albums">
         @for (int i = 0; i < albums.Count; i++)
         {
             int ii = i;
             <div @onclick="@(() => checkedAlbums[ii] = !checkedAlbums[ii])" class="album">
                 <div class="coverDiv">
                     <img class="cover" src="@Settings.requestPath/@albums[i].albumCover" alt="">
                 </div>
                 <input type="checkbox" id="@i" @bind="@checkedAlbums[ii]" @bind:event="oninput">
                 <span title="@albums[i].name">@albums[i].name</span>
             </div>
         }
     </div>
</div>

@code{
    [Parameter] //Needs to be passed in
    public List<string> SelectedItems { get; set; } //Passed in from the page. Paths selected by user
    
    [Parameter]
    public EventCallback<int> SelectedItemsCountChanged { get; set; } //Used for clearing SelectedItems. https://blazor-university.com/components/two-way-binding/
    
    [Parameter] //Needs to be passed in
    public string HeaderVis { get; set; } //Passed in from the calling page. Visibility of the header that displays selected items count, misc buttons, etc.
    
    [Parameter]
    public EventCallback<string> HeaderVisChanged { get; set; } //Changing the passed in headerVis.
    
    [Parameter] //Needs to be passed in
    public string AlbumsVis { get; set; } //Visibility of the selector
    
    [Parameter]
    public EventCallback<string> AlbumsVisChanged { get; set; }
    
    private static List<Album> albums;
    private static List<bool> checkedAlbums;
    
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    protected override void OnInitialized()
    {
        AlbumsVis = "hidden";
        HeaderVis = "hidden";
        albums = GetAlbumsTable();
        checkedAlbums = (from album in albums select new bool()).ToList();
    }

    //Closing the div for selecting album(s) to add selected items to.
    private async Task CloseBtnClick()
    {
        AlbumsVis = "hidden";
        await AlbumsVisChanged.InvokeAsync("hidden");
        for (int index = 0; index < checkedAlbums.Count; index++) checkedAlbums[index] = false;
    }
    
    private async Task ClearChecks()
    {
        foreach (string item in SelectedItems)
            await JSRuntime.InvokeAsync<string>("removeCheck", item);
        SelectedItems.Clear();
        AlbumsVis = "hidden";
        HeaderVis = "hidden";
        await SelectedItemsCountChanged.InvokeAsync(0);
        await HeaderVisChanged.InvokeAsync("hidden");
    }

    //Add item(s) to album(s) selected.
    private async void ConfirmBtnClick()
    {
        for (int c = 0; c < checkedAlbums.Count; c++)
        {
            if (checkedAlbums[c] == false) continue;

            foreach (string item in SelectedItems)
            {
                AddToAlbum(item, albums[c].id);
            }
        }
        await CloseBtnClick();
        await ClearChecks();
    }
}