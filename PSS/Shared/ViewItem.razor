@*Reusable component used for viewing an item in either Index or AlbumView.
Required Parameters:
    1. string id (uuid) to display
    2. List of items that the currently viewed item is a part of.
        E.g., if the viewed item was in Index, that would be the List of items from the media SQL table.
        If it was an item in an album, the List would be the List of items in that album.
        This List allows the user to go left/right through the List to view different items,
        instead of having to hit the back button each time. Google Photos has this same behavior, although it is much faster.
    3. String Page. Either 'view' or 'view-album-item/<albumID>' Used for the left/right buttons.
    4. String ReturnPath: The page to return to when hit the back button.
    5. DateTime DateAdded: Either date added to library (if viewing Index items) or date added to album.
*@
@using PSS.Backend
@inject NavigationManager navigationManager;

<title>View</title>
<link href="/css/components/ViewItem.css" rel="stylesheet"/>

@{
    if (path == "null") //If URL contains a UUID that isn't present in the database.
    {
        <NavMenu/>
        <Error/>
    }
    else
    {
        @*Stuff in top right corner*@
        <div id="buttons">
            <button @onclick="@(() => ToggleDropdown(ref infoVis))" title="Show Info"><span class="material-icons-outlined">info</span></button>
            <button @onclick="@DeleteBtnClick" title="Delete"><svg width="24px" height="24px" class="material-icons-outlined" style="fill: white;" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg></button>
            <button @onclick="@(() => ToggleDropdown(ref moreOptionsVis))"><span class="material-icons-outlined">more_vert</span></button>
        </div>
        
        <div id="infoDiv" style="visibility: @infoVis">
            <div class="dataDiv" title="Date Taken">
                <svg width="24px" height="24px" class="v1262d JUQOtc Y0p3Ue" viewBox="0 0 24 24"><path d="M19 3h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM9 9.5a2.5 2.5 0 0 0 0 5 2.5 2.5 0 0 0 0-5z"></path></svg>
                <span>@ogDateTaken.ToString("ddd, MMM d, yyyy h:mm:ss tt")</span>
                <button @onclick="@(() => editDateDivVis = "visible")"><span class="material-icons-outlined">edit</span></button>
            </div>
            
            <div class="dataDiv" title="Date Added">
                <svg width="24px" height="24px" class="v1262d JUQOtc Y0p3Ue" viewBox="0 0 24 24"><path d="M19 3h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM9 9.5a2.5 2.5 0 0 0 0 5 2.5 2.5 0 0 0 0-5z"></path></svg>
                <span>@DateAdded.ToString("ddd, MMM d, yyyy h:mm:ss tt")</span>
            </div>

            <div class="dataDiv">
                <svg width="24px" height="24px" class="v1262d JUQOtc Y0p3Ue" viewBox="0 0 24 24"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14zm-5-7l-3 3.72L9 13l-3 4h12l-4-5z"></path></svg>
                <span>@System.IO.Path.GetFileName(Connection.GetPathFromUuid(id))</span>
            </div>
            
            @if (albums.Count > 0)
            {
                <span id="albumsText">Albums</span>
                <div id="albumsIn">
                    @foreach (Connection.Album album in albums)
                    {
                        <a href="/album-view/@album.id">
                            <div class="album">
                                <div class="coverDiv">
                                    <img class="cover" src="@Settings.requestPath/@album.albumCover" alt="">
                                </div>
                                <span title="@album.name">@album.name</span>
                            </div>
                        </a>
                    }
                </div>
            }
        </div>
        
        <div id="moreOptionsDiv" style="visibility: @moreOptionsVis">
            <button title="Star"><span class="material-icons-outlined">star_border</span></button>
            <button @onclick="@(() => albumsVis = "visible")" title="Add to Album"><span class="material-icons-outlined">collections</span></button>
            <button title="Add to Folder"><span class="material-icons-outlined">perm_media</span></button>
            <button title="Archive"><span class="material-icons-outlined">archive</span></button>
        </div>
        
        <AlbumSelector SelectedItems="@(new List<string> {path})" @bind-AlbumsVis="@albumsVis"/>
        
        <div id="datePicker" style="visibility: @editDateDivVis;">
            <span>Enter new date taken:</span>
            <input title="" type="datetime-local" @bind="@newDateTaken" required/>
            <div id="buttons">
                <button @onclick="@(() => editDateDivVis = "hidden")"><span class="material-icons-outlined">close</span></button>
                <button @onclick="@ConfirmBtnClick"><span class="material-icons-outlined">check</span></button>
            </div>
        </div>
        
        <button id="backBtn" onclick="location.href='@ReturnPath'"><span class="material-icons-outlined">keyboard_backspace</span></button>

        if (index - 1 >= 0) //Don't go outside array
        {
            <div onclick="location.href='/@Page/@MediaList[index - 1].uuid'" class="sideBtn" id="leftBtn">
                <svg width="36px" height="36px" viewBox="0 0 24 24"><path d="M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"></path></svg>
            </div>
        }
        
        <div @onkeydown="@ChangeImage" tabindex="0" id="imgDiv"><img onload="document.getElementById('imgDiv').focus()" id="@path" src="@Settings.requestPath/@path" alt=""/></div>
                                                                                                                           
        if (index + 1 < MediaList.Count)
        {
            <div onclick="location.href='/@Page/@MediaList[index + 1].uuid'" class="sideBtn" id="rightBtn">
                <svg width="36px" height="36px" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg>
            </div>
        }
    }
}

@code {
    [Parameter]
    public string id { get; set; }
    private static Guid parsedID;
    
    [Parameter]
    public List<Connection.MediaRow> MediaList { get; set; }
    
    [Parameter]
    public string Page { get; set; }

    [Parameter]
    public string ReturnPath { get; set; }
    
    [Parameter]
    public DateTime DateAdded { get; set; }
    
    private static string path;
    private static DateTime ogDateTaken; //Original
    private static DateTime newDateTaken;
    private static string albumsVis;
    private static string infoVis;
    private static string moreOptionsVis;
    private static string editDateDivVis;
    private static List<Connection.Album> albums;
    private static int index; //The current image's index in the list
}

@functions{
    protected override void OnInitialized()
    {
        parsedID = Guid.Parse(id);
        path = Connection.GetPathFromUuid(parsedID);
        ogDateTaken = newDateTaken = Connection.GetDateTaken(parsedID);
        albumsVis = "hidden";
        infoVis = "hidden";
        moreOptionsVis = "hidden";
        editDateDivVis = "hidden";
        albums = Connection.GetAlbumsItemIn(path);
        index = MediaList.IndexOf(new Connection.MediaRow(path, ogDateTaken, DateAdded, parsedID));
    }
    
    private void DeleteBtnClick()
    {
        navigationManager.NavigateTo(ReturnPath);
        Connection.MoveToTrash(Connection.GetPathFromUuid(parsedID));
    }

    private static void ToggleDropdown(ref string visibility) => visibility = visibility == "visible" ? "hidden" : "visible";

    private static void ConfirmBtnClick()
    {
        editDateDivVis = "hidden";
        Connection.UpdateDateTaken(path, newDateTaken);
        ogDateTaken = newDateTaken;
    }

    private void ChangeImage(KeyboardEventArgs e)
    {
        if (e.Code == "KeyB")
        {
            navigationManager.NavigateTo(ReturnPath, true);
            return;
        }
        
        if (!e.AltKey && e.Code == "ArrowLeft" && index - 1 > 0)
        {
            id = MediaList[index - 1].uuid.ToString();
            navigationManager.NavigateTo($"{Page}/{id}", true); //True makes this actually work
        }
        else if (!e.AltKey && e.Code == "ArrowRight" && index + 1 < MediaList.Count)
        {
            id = MediaList[index + 1].uuid.ToString();
            navigationManager.NavigateTo($"{Page}/{id}", true);
        }
    }
}