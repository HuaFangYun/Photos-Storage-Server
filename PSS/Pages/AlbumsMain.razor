@* Show all albums and allow user to sort them and make new ones *@
@page "/albums"
@using static PSS.Backend.Connection
@using PSS.Backend

<title>Albums</title>
<link href="css/AlbumsMain.css" rel="stylesheet">

<header>
    <span id="albumsText">Albums</span>
    <AlbumCreator Albums="@albums"/>
    
    <div id="checkboxes">
        <div>
            <input type="checkbox" @bind="@showAlbums">
            <span @onclick="@(() => { showAlbums = !showAlbums; GetAlbumsTable(); })">Show Albums</span>
        </div>
        <div>
            <input type="checkbox" @bind="@showFolders">
            <span @onclick="@(() => { showFolders = !showFolders; GetAlbumsTable(); })">Show Folders</span>
        </div>
    </div>

    <button class="textBtn" @onclick="@(() => Functions.ToggleVisibility(ref sortDivVis))" id="sortBtn"><span class="material-icons-outlined">sort</span><span class="btnText">@sortBtnText</span></button>
    <div id="sortDiv" style="visibility: @sortDivVis"> @* This is ugly but I think it works well *@
        <button class="textBtn" @onclick="@(() => ChangeOrder(AMSortMode.Title))">
            <span class="material-icons-outlined" style="@(mode == AMSortMode.Title ? "color: #1a73e8" : "visibility: hidden")">check</span>
            <span style="color: @(mode == AMSortMode.Title ? "#1a73e8" : "white")">Album Title</span>
        </button>
        <button class="textBtn" @onclick="@(() => ChangeOrder(AMSortMode.TitleReversed))">
            <span class="material-icons-outlined" style="@(mode == AMSortMode.TitleReversed ? "color: #1a73e8" : "visibility: hidden")">check</span>
            <span style="color: @(mode == AMSortMode.TitleReversed ? "#1a73e8" : "white")">Album Title Reversed</span>
        </button>
        <button class="textBtn" @onclick="@(() => ChangeOrder(AMSortMode.LastModified))">
            <span class="material-icons-outlined" style="@(mode == AMSortMode.LastModified ? "color: #1a73e8" : "visibility: hidden")">check</span>
            <span style="color: @(mode == AMSortMode.LastModified ? "#1a73e8" : "white")">Last Modified</span>
        </button>
        <button class="textBtn" @onclick="@(() => ChangeOrder(AMSortMode.LastModifiedReversed))">
            <span class="material-icons-outlined" style="@(mode == AMSortMode.LastModifiedReversed ? "color: #1a73e8" : "visibility: hidden")">check</span>
            <span style="color: @(mode == AMSortMode.LastModifiedReversed ? "#1a73e8" : "white")">Last Modified Reversed</span>
        </button>
    </div>
</header>

<div id="mainDiv">
    @foreach (Album album in albums)
    { 
        <div class="album" onclick="location.href='/album-view/@album.id'"> @*Text and album thumbnail*@
            <div class="thumbnail">
                @if (album.albumCover != ""){<img src="@PSS.Settings.requestPath/@album.albumCover" alt=""/>}
            </div>
            <span class="albumName">@album.name</span>
        </div>
    }
</div>

@code {
    private static List<Album> albums;
    
    private static string sortBtnText;
    private static string sortDivVis;
    private static AMSortMode mode;

    private static bool showAlbums = true;
    private static bool showFolders = false;

    protected override void OnInitialized()
    {
        GetAlbumsTable();
        
        mode = AMSortMode.LastModified; //Default sort mode
        
        SetSortBtnText();
        sortDivVis = "hidden";
    }

    private static void GetAlbumsTable() => albums = Connection.GetAlbumsTable(showAlbums, showFolders, mode);

    private static void SetSortBtnText()
    {
        sortBtnText = mode switch
        {
            AMSortMode.Title => "Album Title",
            AMSortMode.TitleReversed => "Title Reversed",
            AMSortMode.LastModified => "Last Modified",
            AMSortMode.LastModifiedReversed => "Last Modified Reversed",
            _ => "Album Title"
        };
    }

    private static void ChangeOrder(AMSortMode newMode)
    {
        mode = newMode;
        GetAlbumsTable();
        SetSortBtnText();
        sortDivVis = "hidden";
    }
}