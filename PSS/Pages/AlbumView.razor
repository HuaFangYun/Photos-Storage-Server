@page "/album-view/{albumID}"
@inject NavigationManager navigationManager; //https://stackoverflow.com/a/58417140
@using static PSS.Backend.Connection
@using PSS.Backend

<title>@albumName</title>
<link href="css/AlbumView.css" rel="stylesheet">

@{
    isFolder = IsFolder(statAlbumID);
    string vis = selectedItems.Count > 0 ? "visible" : "hidden";
    
    <header>
        <button class="iconBtn" @onclick="@ClearChecks" style="visibility: @vis" id="clearBtn"><span class="material-icons-outlined">close</span></button>
        <span style="visibility: @vis" id="selectedAmtText">@selectedItems.Count&nbsp;&nbsp;Selected</span>

        <div id="albumRenameDiv">
            <input type="text" placeholder="Enter new album name" @bind="NewAlbumName" @bind:event="oninput" autocomplete="off">
            
            <button class="iconBtn" @onclick="@CancelBtnClick" style="visibility: @buttonsVis">
                <span class="material-icons-outlined">close</span>
            </button>
    
            <button class="iconBtn" @onclick="@ConfirmBtnClick" style="visibility: @buttonsVis">
                <span class="material-icons-outlined">check</span>
            </button>
        </div>

        <div id="buttons">
            <button class="iconBtn" style="visibility: @vis" @onclick="@(() => albumsVis = "visible")" title="Add Selected to Album"><span class="material-icons-outlined">library_add</span></button>
            <button class="iconBtn" style="visibility: @vis" title="Add or Remove Stars From Selected" @onclick="@(() => starChoiceVis = "visible")"><span class="material-icons-outlined">star_outline</span></button>
            <button class="iconBtn" style="visibility: @vis" @onclick="@RemoveBtnClick" title="Remove Selected"><span class="material-icons-outlined">remove</span></button>
            <button class="iconBtn" style="visibility: @vis" @onclick="@DeleteSelectedBtnClick" title="Delete Selected"><svg width="24px" height="24px" class="material-icons" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg></button>
            <button class="iconBtn" @onclick="@(() => sortDivVis = sortDivVis == "hidden" ? "visible" : "hidden")" title="More Options"><span class="material-icons-outlined">more_vert</span></button>
        </div>

        <div id="moreOptionsDiv" style="visibility: @sortDivVis">
            <button @onclick="@(() => ChangeOrder(AVSortMode.OldestDateTaken))"><span class="material-icons-outlined" style="@(mode == AVSortMode.OldestDateTaken ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(mode == AVSortMode.OldestDateTaken ? "#1a73e8" : "white")">Oldest Date Taken First</span></button>
            <button @onclick="@(() => ChangeOrder(AVSortMode.NewestDateTaken))"><span class="material-icons-outlined" style="@(mode == AVSortMode.NewestDateTaken ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(mode == AVSortMode.NewestDateTaken ? "#1a73e8" : "white")">Newest Date Taken First</span></button>
            <button @onclick="@(() => ChangeOrder(AVSortMode.OldestAdded))"><span class="material-icons-outlined" style="@(mode == AVSortMode.OldestAdded ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(mode == AVSortMode.OldestAdded ? "#1a73e8" : "white")">Oldest Added First</span></button>
            <button @onclick="@(() => ChangeOrder(AVSortMode.NewestAdded))"><span class="material-icons-outlined" style="@(mode == AVSortMode.NewestAdded ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(mode == AVSortMode.NewestAdded ? "#1a73e8" : "white")">Newest Added First</span></button>
            
            @if(isFolder){<button><span class="material-icons-outlined">&#xe411;</span><span>Change to Album</span></button>}
            else{<button><span class="material-icons-outlined">perm_media</span><span>Change to Folder</span></button>}
            
            <button @onclick="@DeleteAlbumBtnClick"><svg width="24px" height="24px" class="material-icons" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg><span>@(isFolder ? "Delete Folder" : "Delete Album")</span></button>
        </div>
    </header>
    <TwoChoiceInput YesBtnIcon="star" NoBtnIcon="star_outline" YesBtnText="Add" NoBtnText="Remove" @bind-TwoChoiceVis="@starChoiceVis" YesBtnClick="@(() => UpdateStars(true))" NoBtnClick="@(() => UpdateStars(false))" Message="@(selectedItems.Count > 1 ? "Add or remove stars for selected items?" : "Add or remove star for selected item?")"/>

    <AlbumSelector SelectedItems="@selectedItems" @bind-HeaderVis="@buttonsVis" @bind-AlbumsVis="@albumsVis"/>
    <TwoChoiceInput @bind-TwoChoiceVis="@choiceVis" YesBtnClick="@yesBtnFunc" NoBtnClick="@CloseChoiceDiv" Message="@choiceMsg"/>

    if (albumMedia.Count == 0)
    {
        if (isFolder) {
            <h1>Folder is empty</h1>
        }
        else {
            <h1>Album is empty</h1>
        }
    }
    else
    {
        <div id="mainDiv">
            @foreach (MediaRow media in albumMedia)
            {
                <div class="thumbnail">
                    @if (media.starred) {<span class="material-icons-outlined star-icon">star</span>}
                    <span @onclick="@(() => ToggleCheck(media.path))" id="@media.path" class="material-icons checkbox unchecked">check_circle</span>
                    <img @onclick="@(() => ImgClicked(media.uuid.ToString(), media.path))" src="@PSS.Settings.requestPath/@media.path" alt="@PSS.Settings.requestPath/@media.path" loading="lazy"/>
                </div>
            }
         </div>
    }
}

@code {
    [Parameter]
    public string albumID { get; set; }
    private static int statAlbumID;
    private static bool isFolder;

    private static string albumsVis;
    private static List<MediaRow> albumMedia;
    private static List<string> selectedItems;
    private static string sortDivVis;
    private static AVSortMode mode;
    private static string albumName;
    private static string _newAlbumName;
    private static string buttonsVis;
    
    private static string choiceVis;
    private static string choiceMsg;
    private static Action yesBtnFunc;
    
    private static string starChoiceVis;
    
    private async void UpdateStars(bool starred)
    {
        UpdateStarred(selectedItems, starred);
        await ClearChecks();
        starChoiceVis = "hidden";
        albumMedia = LoadAlbum(statAlbumID);
        StateHasChanged();
    }

    private static string NewAlbumName
    {
        get => _newAlbumName;
        set
        {
            if (value == albumName) //Same so don't need to reapply
            {
                buttonsVis = "hidden";
            }
            else if (value != albumName)
            {
                _newAlbumName = value;
                buttonsVis = "visible";
            }
        }
    }
    
    //Shit click stuff.
    private static bool shiftDown;
    private static int lastIndex;
    private async Task getShiftDown() => shiftDown = await JSRuntime.InvokeAsync<bool>("getShiftDown");
    
    private static bool ctrlDown;
    private async Task GetCtrlDown() => ctrlDown = await JSRuntime.InvokeAsync<bool>("getCtrlDown");

    protected override void OnInitialized()
    {
        albumsVis = "hidden";
        statAlbumID = Int32.Parse(albumID);
        albumMedia = LoadAlbum(statAlbumID);
        selectedItems = new List<string>(); //Reset on page load/refresh
        sortDivVis = "hidden";
        mode = AVSortMode.NewestDateTaken; //Default
        albumName = GetAlbumName(statAlbumID);
        _newAlbumName = albumName;
        buttonsVis = "hidden";
        selectedItems = new List<string>(); //Reset on page load/refresh
        choiceVis = "hidden";
        starChoiceVis = "hidden";
    }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    private async Task ToggleCheck(string id) //id = string path
    {
        string newClass = await JSRuntime.InvokeAsync<string>("toggleCheck", id);
        if (newClass.Contains("unchecked"))
            selectedItems.Remove(id);
        else if (!selectedItems.Contains(id)) //Needed to prevent adding dupes when shift clicking
            selectedItems.Add(id);

        //Get mediaList currentIndex of latest selected thing. Needed only for shift click
        int index = -1;
        for (int i = 0; i < albumMedia.Count; i++)
        {
            if (albumMedia[i].path != id) continue;
            index = i;
            break;
        }

        await getShiftDown();
        if (!shiftDown) //Not shift click so just select 1 item like normal.
        {
            lastIndex = index;
            return;
        }
        await ShiftClick(index); //Select multiple.
    }

    //Add items from start to end into selectedItems. Used for ShiftClick.
    private async Task AddSelected(int startIndex, int endIndex)
    {
        for (int i = startIndex; i <= endIndex; i++)
        {
            string currentID = albumMedia[i].path;
            if (selectedItems.Contains(currentID)) continue;
            selectedItems.Add(currentID);
            await ToggleCheck(currentID);
        }
    }

    //If shift was held down select multiple things
    private async Task ShiftClick(int currentIndex)
    {
        //First item is on left and item shift clicked is right. E.g., ###1####2### Loop from 1 --> 2, and add stuff in between to selected items
        if (lastIndex < currentIndex)
            await AddSelected(lastIndex, currentIndex);
        else if (lastIndex > currentIndex) //Same as above but swap 1 and 2 and the direction.
            await AddSelected(currentIndex, lastIndex);
    }
    
    private async Task ClearChecks()
    {
        foreach (string item in selectedItems)
            await JSRuntime.InvokeAsync<string>("removeCheck", item);
        selectedItems.Clear();
        albumsVis = "hidden";
        choiceVis = "hidden";
    }

    private async Task ImgClicked(string uuid, string path)
    {
        await GetCtrlDown();
        if (selectedItems.Count > 0 || ctrlDown)
            await ToggleCheck(path);
        else
            navigationManager.NavigateTo($"/view-album-item/{albumID}/{uuid}");
    }

    //Remove selected from the album
    private async Task RemoveBtnClick()
    {
        foreach (string path in selectedItems.ToList()) RemoveFromAlbum(path, statAlbumID);
        await ClearChecks();
        albumMedia = LoadAlbum(statAlbumID, mode);
    }
    
    //Choice div stuff
    //Show prompt and make yes Action the delete selected items
    private void DeleteSelectedBtnClick()
    {
        if (albumMedia.Count == 0) return;
        if (PSS.Settings.showPrompts == false)
        {
            DeleteSelected();
            return;
        }
        
        yesBtnFunc = DeleteSelected;
        choiceVis = "visible";
        choiceMsg = selectedItems.Count > 1 ? "Delete Selected Items?" : "Delete Selected Item?";
    }

    private async void DeleteSelected()
    {
        foreach (string path in selectedItems.ToList()) MoveToTrash(path);
        await ClearChecks();
        albumMedia = LoadAlbum(statAlbumID, mode);
        StateHasChanged();
    }

    private void DeleteAlbumBtnClick()
    {
        if (PSS.Settings.showPrompts == false)
        {
            DeleteAlbum();
            return;
        }

        yesBtnFunc = DeleteAlbum;
        choiceVis = "visible";
        choiceMsg = $"Permanently Delete Album \"{albumName}\"?";
    }
    
    private void DeleteAlbum()
    {
        navigationManager.NavigateTo("/albums");
        Connection.DeleteAlbum(statAlbumID);
    }

    private void CloseChoiceDiv()
    {
        choiceVis = "hidden";
        StateHasChanged();
    }

    //Functions for album stuff
    private static void CancelBtnClick()
    {
        buttonsVis = "hidden";
        _newAlbumName = albumName; //Reset to OG
    }

    private static void ConfirmBtnClick()
    {
        buttonsVis = "hidden";
        if (NewAlbumName != "")
            RenameAlbum(NewAlbumName, statAlbumID);
        else
            NewAlbumName = "Please enter a name";
    }
        
    private static void ChangeOrder(AVSortMode newMode)
    {
        mode = newMode;
        albumMedia = LoadAlbum(statAlbumID, mode);
    }
}
