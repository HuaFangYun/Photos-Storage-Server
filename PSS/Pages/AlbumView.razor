@page "/album-view/{albumID}"
@inject NavigationManager navigationManager; //https://stackoverflow.com/a/58417140
@using static PSS.Backend.Connection
@using PSS.Backend

<link href="css/AlbumView.css" rel="stylesheet">

@{
    <header>
        <button @onclick="@(() => sortDivVis = sortDivVis == "hidden" ? "visible" : "hidden")" title="More Options"><span class="material-icons-outlined">more_vert</span></button>
        <div id="moreOptionsDiv" style="visibility: @sortDivVis">
            <button @onclick="@(() => ChangeOrder(AVSortMode.OldestDateTaken))"><span class="material-icons-outlined" style="@(mode == AVSortMode.OldestDateTaken ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(mode == AVSortMode.OldestDateTaken ? "#1a73e8" : "white")">Oldest Date Taken First</span></button>
            <button @onclick="@(() => ChangeOrder(AVSortMode.NewestDateTaken))"><span class="material-icons-outlined" style="@(mode == AVSortMode.NewestDateTaken ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(mode == AVSortMode.NewestDateTaken ? "#1a73e8" : "white")">Newest Date Taken First</span></button>
            <button @onclick="@(() => ChangeOrder(AVSortMode.OldestAdded))"><span class="material-icons-outlined" style="@(mode == AVSortMode.OldestAdded ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(mode == AVSortMode.OldestAdded ? "#1a73e8" : "white")">Oldest Added First</span></button>
            <button @onclick="@(() => ChangeOrder(AVSortMode.NewestAdded))"><span class="material-icons-outlined" style="@(mode == AVSortMode.NewestAdded ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(mode == AVSortMode.NewestAdded ? "#1a73e8" : "white")">Newest Added First</span></button>
            <button @onclick="DeleteAlbumBtnClick"><svg width="24px" height="24px" class="material-icons" style="fill: white;" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg><span>Delete Album</span></button>
        </div>
        
        <button @onclick="DeleteSelectedBtnClick" style="visibility: @(selectedItems.Count > 0 ? "visible" : "hidden")" title="Delete Selected"><svg width="24px" height="24px" class="material-icons" style="fill: white;" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg></button>
        <button @onclick="RemoveBtnClick" style="visibility: @(selectedItems.Count > 0 ? "visible" : "hidden")" title="Remove Selected"><span class="material-icons-outlined">remove</span></button>
        <button style="visibility: @(selectedItems.Count > 0 ? "visible" : "hidden")" title="Star Selected"><span class="material-icons-outlined">star_outline</span></button>
        <button @onclick="@(() => albumsVis = "visible")" style="visibility: @(selectedItems.Count > 0 ? "visible" : "hidden")" title="Add Selected to Album"><span class="material-icons-outlined">library_add</span></button>
        <span style="visibility: @(selectedItems.Count > 0 ? "visible" : "hidden")" id="selectedAmtText">@selectedItems.Count selected</span>
        <button @onclick="ClearChecks" style="visibility: @(selectedItems.Count > 0 ? "visible" : "hidden")" id="clearBtn"><span class="material-icons-outlined">close</span></button>
        
        <div id="albumRenameDiv">
            <input type="text" placeholder="Enter new album name" @bind="NewAlbumName" @bind:event="oninput" autocomplete="off">
            
            <button @onclick="CancelBtnClick" style="visibility: @buttonsVis">
                <span class="material-icons-outlined">close</span><span>Cancel</span>
            </button>
    
            <button @onclick="ConfirmBtnClick" style="visibility: @buttonsVis">
                <span class="material-icons-outlined">check</span><span>Confirm</span>
            </button>
        </div>
    </header>
    
    <AlbumSelector SelectedItems="@selectedItems" @bind-HeaderVis="@buttonsVis" @bind-AlbumsVis="@albumsVis"/>
    <TwoChoiceInput @bind-TwoChoiceVis="@choiceVis" YesBtnClick="@yesBtnFunc" NoBtnClick="@CloseChoiceDiv" Message="@choiceMsg"/>

    if (albumMedia.Count == 0)
    {
        <h1>Album is empty</h1>
    }
    else
    {
        <div id="mainDiv">
            @foreach (MediaRow media in albumMedia)
            {
                <div class="thumbnail">
                    <span @onclick="(() => ToggleCheck(media.path))" id="@media.path" class="material-icons unchecked">check_circle</span>
                    <img @onclick="() => ImgClicked(media.uuid.ToString(), media.path)" style="color: white" src="@PSS.Settings.requestPath/@media.path" alt="@PSS.Settings.requestPath/@media.path" loading="lazy"/>
                </div>
            }
         </div>
    }
}

@code {
    [Parameter]
    public string albumID { get; set; }
    private static int statAlbumID;

    private static string albumsVis;
    private static List<MediaRow> albumMedia;
    private static List<string> selectedItems;
    private static string sortDivVis;
    private static AVSortMode mode;
    private static string albumName;
    private static string _newAlbumName;
    private static string buttonsVis;
    
    private static string choiceVis;
    private static string choiceMsg;
    private static Action yesBtnFunc;

    private static string NewAlbumName
    {
        get => _newAlbumName;
        set
        {
            if (value == albumName) //Same so don't need to reapply
            {
                buttonsVis = "hidden";
            }
            else if (value != albumName)
            {
                _newAlbumName = value;
                buttonsVis = "visible";
            }
        }
    }
    
    protected override void OnInitialized()
    {
        albumsVis = "hidden";
        statAlbumID = Int32.Parse(albumID);
        albumMedia = LoadAlbum(statAlbumID);
        selectedItems = new List<string>(); //Reset on page load/refresh
        sortDivVis = "hidden";
        mode = AVSortMode.NewestDateTaken; //Default
        albumName = GetAlbumName(statAlbumID);
        _newAlbumName = albumName;
        buttonsVis = "hidden";
        selectedItems = new List<string>(); //Reset on page load/refresh
        choiceVis = "hidden";
    }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    private async Task ToggleCheck(string id) //id = string path
    {
        string newClass = await JSRuntime.InvokeAsync<string>("toggleCheck", id);
        if (newClass.Contains("unchecked"))
            selectedItems.Remove(id);
        else
            selectedItems.Add(id);
    }
    
    private async Task ClearChecks()
    {
        foreach (string item in selectedItems)
            await JSRuntime.InvokeAsync<string>("removeCheck", item);
        selectedItems.Clear();
        albumsVis = "hidden";
        choiceVis = "hidden";
    }

    private async Task ImgClicked(string uuid, string path)
    {
        if (selectedItems.Count > 0)
            await ToggleCheck(path);
        else
            navigationManager.NavigateTo($"/view-album-item/{albumID}/{uuid}");
    }

    //Remove selected from the album
    private async Task RemoveBtnClick()
    {
        foreach (string path in selectedItems.ToList()) RemoveFromAlbum(path, statAlbumID);
        await ClearChecks();
        albumMedia = LoadAlbum(statAlbumID, mode);
    }
    
    //Choice div stuff
    //Show prompt and make yes Action the delete selected items
    private void DeleteSelectedBtnClick()
    {
        if (albumMedia.Count == 0) return;
        
        /*
         * if show choice on, do this stuff below
         * else just call the DeleteSelected
         */
        
        yesBtnFunc = DeleteSelected;
        choiceVis = "visible";
        choiceMsg = selectedItems.Count > 1 ? "Delete Selected Items?" : "Delete Selected Item?";
    }

    private async void DeleteSelected()
    {
        foreach (string path in selectedItems.ToList()) MoveToTrash(path);
        await ClearChecks();
        albumMedia = LoadAlbum(statAlbumID, mode);
        StateHasChanged();
    }

    private void DeleteAlbumBtnClick()
    {
        yesBtnFunc = DeleteAlbum;
        choiceVis = "visible";
        choiceMsg = $"Permanently Delete Album \"{albumName}\"?";
    }
    
    private void DeleteAlbum()
    {
        navigationManager.NavigateTo("/albums");
        Connection.DeleteAlbum(statAlbumID);
    }

    private void CloseChoiceDiv()
    {
        choiceVis = "hidden";
        StateHasChanged();
    }

    //Functions for album stuff
    private static void CancelBtnClick()
    {
        buttonsVis = "hidden";
        _newAlbumName = albumName; //Reset to OG
    }

    private static void ConfirmBtnClick()
    {
        buttonsVis = "hidden";
        if (NewAlbumName != "")
            RenameAlbum(NewAlbumName, statAlbumID);
        else
            NewAlbumName = "Please enter a name";
    }
        
    private static void ChangeOrder(AVSortMode newMode)
    {
        mode = newMode;
        albumMedia = LoadAlbum(statAlbumID, mode);
    }
}
