@page "/trash"
@inject NavigationManager navigationManager;
@using static PSS.Backend.Connection

<link href="css/Trash.css" rel="stylesheet"/>

@{
    <header>
        <button class="iconBtn" id="clearBtn" style="visibility: @(selectedItems.Count == 0 ? "hidden" : "visible")" @onclick="ClearChecks"><span class="material-icons-outlined">close</span></button>
        <span id="selectedAmtText" style="visibility: @(selectedItems.Count == 0 ? "hidden" : "visible")">@selectedItems.Count selected</span>
        <div>
            <button class="textBtn" @onclick="RestoreBtnClick"><span class="material-icons-outlined">restore_from_trash</span><span>@(selectedItems.Count == 0 ? "Restore ALL" : "Restore Selected")</span></button>
            <button class="textBtn" @onclick="DeleteBtnClick"><span class="material-icons-outlined">delete_forever</span><span>@(selectedItems.Count == 0 ? "Delete ALL" : "Delete Selected")</span></button>
        </div>
    </header>
    
    <TwoChoiceInput @bind-TwoChoiceVis="@choiceVis" YesBtnClick="@yesBtnFunc" NoBtnClick="@CloseChoiceDiv" Message="@choiceMsg"/>

    if (mediaTrashList.Count == 0)
    {
        <h1>Trash is empty</h1>
    }
    else
    {
        <div id="mainDiv">
            @foreach (MediaRow media in mediaTrashList)
            {
                <div class="thumbnail">
                    <span @onclick="(() => ToggleCheck(media.path))" id="@media.path" class="material-icons unchecked">check_circle</span>
                    <img @onclick="() => ImgClicked(media.path)" style="color: white" src="@PSS.Settings.requestPath/@media.path" alt="@PSS.Settings.requestPath/@media.path" loading="lazy"/>
                </div>
            }
        </div>
    }
}

@code {
    private static List<MediaRow> mediaTrashList;
    private static List<string> selectedItems; //Stores all items (paths) user selected. If unchecked, removed from list.

    private static string choiceVis;
    private static Action yesBtnFunc;
    private static string choiceMsg;
    
    protected override void OnInitialized()
    {
        mediaTrashList = LoadMediaTrashTable();
        selectedItems = new List<string>(); //Reset on page load/refresh
        choiceVis = "hidden";
    }

    [Inject] //https://code-maze.com/how-to-call-javascript-code-from-net-blazor-webassembly/
    public IJSRuntime JSRuntime { get; set; }

    private async Task ToggleCheck(string id) //id = string path
    {
        string newClass = await JSRuntime.InvokeAsync<string>("toggleCheck", id);
        if (newClass.Contains("unchecked"))
            selectedItems.Remove(id);
        else
            selectedItems.Add(id);
    }

    private async Task ClearChecks()
    {
        foreach (string item in selectedItems)
            await JSRuntime.InvokeAsync<string>("removeCheck", item);
        selectedItems.Clear();
        choiceVis = "hidden";
    }
    
    private async Task ImgClicked(string path)
    {
        if (selectedItems.Count > 0) await ToggleCheck(path);
    }

    //Show choice div
    private void RestoreBtnClick()
    {
        if (mediaTrashList.Count == 0) return;

        yesBtnFunc = RestoreItems;
        
        choiceVis = "visible";
        choiceMsg = selectedItems.Count switch
        {
            0 => "Restore Everything?",
            1 => "Restore Selected Item?",
            _ => "Restore Selected Items?"
        };
    }

    private async void RestoreItems()
    {
        //Restore ALL
        if (selectedItems.Count == 0)
            foreach (MediaRow item in mediaTrashList) RestoreItem(item.path);
        else //Restore selected
        {
            foreach (string item in selectedItems)
            {
                await JSRuntime.InvokeAsync<string>("removeCheck", item);
                RestoreItem(item);
            }
        }
        await ClearChecks();
        mediaTrashList = LoadMediaTrashTable();
        selectedItems.Clear();
        StateHasChanged();
    }

    //Show choice div
    private void DeleteBtnClick()
    {
        if (mediaTrashList.Count == 0) return;

        yesBtnFunc = DeleteItems;

        choiceVis = "visible";
        choiceMsg = selectedItems.Count switch
        {
            0 => "PERMANENTLY Delete Everything?",
            1 => "PERMANENTLY Delete Selected Item?",
            _ => "PERMANENTLY Delete Selected Items?"
        };
    }

    private async void DeleteItems()
    {
        if (selectedItems.Count == 0) //Delete ALL
            foreach (MediaRow item in mediaTrashList) PermDeleteItem(item.path);
        else //Delete selected
        {
            foreach (string item in selectedItems)
            {
                await JSRuntime.InvokeAsync<string>("removeCheck", item);
                PermDeleteItem(item);
            }
        }
        await ClearChecks();
        mediaTrashList = LoadMediaTrashTable();
        selectedItems.Clear();
        StateHasChanged();
    }

    private void CloseChoiceDiv()
    {
        choiceVis = "hidden";
        StateHasChanged();
    }
}