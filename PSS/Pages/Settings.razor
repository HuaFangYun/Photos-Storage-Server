@page "/settings"
@using System.IO
@using Npgsql
@using PSS.Backend
@using C = Backend.Connection;
@using M = Backend.Maintenance;
@using System.Diagnostics

<title>Settings</title>
<link href="css/Settings.css" rel="stylesheet"/>

<div id="body">
    <div>
        <span class="header">Settings</span>
        <div class="settings-pair">
            <span>SSH Username</span>
            <input type="text" class="settings-pair" @bind="@username"/>
        </div>

        <div class="settings-pair">
            <span>Server IP Address</span>
            <input type="text" class="settings-pair" @bind="@serverIP"/>
        </div>

        <div class="settings-pair">
            <span>scp Flags</span>
            <input type="text" class="settings-pair" @bind="@scpFlags"/>
        </div>

        <div class="settings-pair">
            <span>Where to upload items for applying</span>
            <input type="text" class="settings-pair" @bind="@uploadRootPath"/>
        </div>

        <div class="settings-pair">
            <span>Root path to library folder</span>
            <input type="text" class="settings-pair" @bind="@libraryRootPath"/>
        </div>

        <div class="settings-pair">
            <span style="display: inline">Show Prompts?</span>
            <input type="checkbox" class="settings-pair" @bind="@showPrompts"/>
        </div>

        <button class="textBtn" @onclick="@ApplyBtnClicked"><span class="material-icons-outlined">check</span><span>Apply</span></button>
        <button class="textBtn" @onclick="@CancelBtnClicked"><span class="material-icons-outlined">close</span><span>Cancel</span></button>
        <button class="textBtn" @onclick="@ResetBtnClicked"><span class="material-icons-outlined">restart_alt</span><span>Reset</span></button>
    </div>

    <div>
        <span class="header">Maintenance</span>
        <button class="textBtn" title="Items in Library Folder but NOT in Database"><span class="material-icons-outlined">insert_drive_file</span><a href="maintenance/untracked-files">Untracked Files (@untrackedPaths.Count)</a></button>
        <button class="textBtn" title="Paths in Database but File Is Not Present in Library"><span class="material-icons-outlined">find_in_page</span><a href="maintenance/missing-files">Missing Files (@media_missing.Count)</a></button>
        <button class="textBtn" @onclick="@EmptyFoldersBtnClick" title="Click to Delete All Empty Folders From Library and Upload"><span class="material-icons-outlined">folder</span><span>Empty Folders (@emptyFolders.Count)</span></button>
    </div>
    
    <div id="statsDiv">
        <span class="header">Stats</span>
        <button class="textBtn" @onclick="@GetStats" title="Click to Load Stats for Library"><span class="material-icons-outlined">insights</span><span>Load Stats</span></button>
        @if (statsLoaded)
        {
            <span>@mediaRowCount Items in Library</span>
            <span>@albumsCount Albums</span>
        }
    </div>
</div>

@code {
    //Settings
    private static string username = PSS.Settings.username;
    private static string serverIP = PSS.Settings.serverIP;
    private static string scpFlags = PSS.Settings.scpFlags;
    private static string uploadRootPath = PSS.Settings.uploadRootPath;
    private static string libraryRootPath = PSS.Settings.libFolderFullPath;
    private static bool showPrompts = PSS.Settings.showPrompts;
    
    private static List<string> untrackedPaths;

    //Get all folders in Library and Upload
    private static string[] folderPaths;
    private static readonly List<string> emptyFolders = new();
    
    //Missing Files stuff
    private static List<string> media_missing = new();
    private static List<string> media_trash_missing = new();
    private static List<string> album_entries_missing = new();
    private static List<string> album_entries_trash_missing = new();
    
    //Stats
    private static bool statsLoaded;
    private static long mediaRowCount = 0;
    private static long albumsCount = 0;

    protected override void OnInitialized()
    {
        untrackedPaths = Backend.Maintenance.GetUntrackedLibFiles();
        
        folderPaths = Directory.GetDirectories(PSS.Settings.libFolderFullPath, "*", SearchOption.AllDirectories).Concat(Directory.GetDirectories(PSS.Settings.uploadRootPath, "*", SearchOption.AllDirectories)).ToArray();
        foreach (string path in folderPaths)
            if (Backend.Maintenance.IsFolderEmpty(path) && !emptyFolders.Contains(path)) emptyFolders.Add(path);
        
        media_missing = M.GetMissingFiles(M.MissingFilesTable.media);
        media_trash_missing = M.GetMissingFiles(M.MissingFilesTable.media_trash);
        album_entries_missing = M.GetMissingFiles(M.MissingFilesTable.album_entries);
        album_entries_trash_missing = M.GetMissingFiles(M.MissingFilesTable.album_entries_trash);
        media_missing = media_missing.Concat(media_trash_missing).Concat(album_entries_missing).Concat(album_entries_trash_missing).ToList();
    }

    private static void ApplyBtnClicked()
    {
        PSS.Settings.username = username;
        PSS.Settings.serverIP = serverIP;
        PSS.Settings.scpFlags = scpFlags;
        PSS.Settings.uploadRootPath = uploadRootPath;
        PSS.Settings.libFolderFullPath = libraryRootPath;
        PSS.Settings.showPrompts = showPrompts;
        PSS.Settings.WriteSettings();
    }

    private static void CancelBtnClicked()
    {
        username = PSS.Settings.username;
        serverIP = PSS.Settings.serverIP;
        scpFlags = PSS.Settings.scpFlags;
        uploadRootPath = PSS.Settings.uploadRootPath;
        libraryRootPath = PSS.Settings.libFolderFullPath;
        showPrompts = PSS.Settings.showPrompts;
    }

    private static void ResetBtnClicked()
    {
        PSS.Settings.ResetSettings();
        CancelBtnClicked();
    }

    //Delete all empty folders
    private static void EmptyFoldersBtnClick()
    {
        emptyFolders.Reverse(); //Start at deepest folder and work up (to avoid dir not found errors).
        foreach (string path in emptyFolders) Directory.Delete(path);
        emptyFolders.Clear();
    }

    private static void GetStats()
    {
        statsLoaded = true;
        mediaRowCount = Stats.CountMediaRows();
        albumsCount = Stats.CountAlbums();
    }
}