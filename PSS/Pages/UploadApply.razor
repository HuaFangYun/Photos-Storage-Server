@page "/apply-upload"
@using System.Diagnostics

<title>Apply Upload</title>
<link href="css/UploadApply.css" rel="stylesheet">

<header>
    <button class="textBtn" @onclick="@(() => F.VisToggle(ref filterVis))" title="This filter thing sucks I know but how it works is check neither, warning, or error (just 1 at a time) to show just those items">
        <span class="material-icons-outlined">filter_list</span><span>Filter Items</span>
    </button>
    
    <button class="textBtn" @onclick="AddItems">
        <span class="material-icons-outlined">add_photo_alternate</span><span>Add to Library</span>
    </button>
    
    <button class="textBtn" @onclick="DeleteErrorsBtnClick">
        <span class="material-icons-outlined">delete_forever</span><span>Delete Errors</span>
    </button>

    <button class="textBtn" @onclick="@(() => F.VisToggle(ref albumSelectorVis))">
        <span class="material-icons-outlined">@(albumSelectorVis == "visible" ? "image_not_supported" : "image")</span><span>@(albumSelectorVis == "visible" ? "Hide Albums" : "Show Albums")</span>
    </button>

    <span id="statusSpan">@status</span>
</header>

<div id="filter" style="visibility: @filterVis">
    <label><input type="checkbox" @bind="@neitherChecked">Neither</label>
    <label style="color: yellow"><input type="checkbox" @bind="@warningChecked">Warning</label>
    <label style="color: red"><input type="checkbox" @bind="@errorChecked">Error</label>
    <label style="color: #93ccdc"><input type="checkbox" @bind="@infoChecked">Show Info</label>
</div>

<TwoChoiceInput TwoChoiceVis="@promptVis" YesBtnClick="@(() => DeleteErrors())" NoBtnClick="@(() => { promptVis = "hidden"; StateHasChanged(); })" Message="@message"/>
<AlbumSelector @ref="@albumSelector" AlbumsVis="@albumSelectorVis" SelectedItems="@allShortPaths" ShowCheckCancelButtons="false"/>

<KeyboardShortcuts
    CtrlD="@(() => { DeleteErrorsBtnClick(); StateHasChanged(); })"
    AltA="@(() => { F.VisToggle(ref albumSelectorVis); StateHasChanged(); })" />

@{
    GC.Collect();
    GC.WaitForPendingFinalizers();
    UpdateStatus();

    <div id="mainDiv">
        @for (int i = 0; i < allFiles.Count; i++)
        {
            if (warningChecked && allFiles[i].dataPresent) continue; //If this item doesn't have a warning skip it
            if (errorChecked && allFiles[i].alreadyInLib == false) continue; //If this item has an error skip it
            if (neitherChecked && !allFiles[i].dataPresent && !allFiles[i].alreadyInLib) continue; //Only show items with no warnings or errors
            
            int ii = i; @*Using just i caused crash*@
            string path = allFiles[i].fullPath.Replace('\\', '/');
            string ext = Path.GetExtension(path);

            //shortPath is relative to wwwroot
            string shortPath = path.Replace(S.uploadRootPath!, "");
            shortPath = Path.GetFileName(S.uploadRootPath) + shortPath;
            
            string name = Path.GetFileName(path);
            string dateString = allFiles[i].dateTaken.ToString("ddd, MMM d, yyy");
            
            <div class="itemDiv">
                @if (allFiles[i].thumbnail == null)
                {
                    <img title="Click for Full Size Preview" onclick="window.open('@shortPath', '_blank').focus();" src="@shortPath" alt="" loading="lazy"/>
                }
                else
                {
                    <img title="Click for Full Size Preview" onclick="window.open('@("data:image/jpg;base64," + allFiles[i].thumbnail)', '_blank').focus();" src=@("data:image/jpg;base64," + allFiles[i].thumbnail) alt="" loading="lazy"/>
                }

                <span title="@name" class="filenameSpan">@name</span>
                <span title="@dateString" class="dateTakenSpan">@dateString</span>
                @if (!allFiles[i].alreadyInLib){<input title="Choose New Date Taken" type="datetime-local" @bind="@allFiles[ii].alreadyInLib" @bind:event="oninput">}
                @if (infoChecked && allFiles[i].dataPresent){<span class="infoSpan">@allFiles[i].dateTakenSrc.ToString()</span>} @*Don't display now if DT is set to now*@
                @if (!allFiles[i].dataPresent && !allFiles[i].alreadyInLib){<span class="warnSpan">No DT found. DT set to now.</span>}
                @if (allFiles[i].alreadyInLib){<span class="errorSpan">Item already in library. Won't upload.</span>}
                
                <button class="iconBtn" title="Remove This Item From the Upload" @onclick="@(() => DeleteBtnClick(ii, allFiles[ii].fullPath))"><span class="material-icons">close</span></button>
            </div>
        }
    </div>
}

@code{
    AlbumSelector albumSelector = new();

    private static List<string> allShortPaths; //Passed in to AlbumSelector and set in AddItems().
    private static List<C.UAFile> allFiles;

    private static string status;
    private static string promptVis;
    private static string message;
    
    //Filtering
    private static string filterVis;
    private static bool neitherChecked;
    private static bool warningChecked;
    private static bool errorChecked;
    private static bool infoChecked;

    private static string albumSelectorVis;
    
    protected override void OnInitialized()
    {
        //Get all supported file types in pss_upload and group them together in a single List.
        string[] pngPaths = Directory.GetFiles(S.uploadRootPath, "*.png", SearchOption.AllDirectories);
        string[] jpgPaths = Directory.GetFiles(S.uploadRootPath, "*.jp*g", SearchOption.AllDirectories);
        string[] mp4Paths = Directory.GetFiles(S.uploadRootPath, "*.mp4", SearchOption.AllDirectories);
        string[] mkvPaths = Directory.GetFiles(S.uploadRootPath, "*.mkv", SearchOption.AllDirectories);
        string[] allFullPaths = pngPaths.Concat(jpgPaths).Concat(mp4Paths).Concat(mkvPaths).ToArray();
        allFiles = new List<C.UAFile>(allFullPaths.Length);

        foreach (string path in allFullPaths)
        {
            C.UAFile file = new()
            {
                fullPath = path,
                shortPath = null,
                thumbnail = path.Contains(".mp4") || path.Contains(".mkv") ? GenerateThumbnail(path) : null
            };
            (file.dataPresent, file.dateTakenSrc) = Metadata.GetDateTaken(path, out file.dateTaken);
            file.alreadyInLib = ItemExists(Path.GetFileName(path), file.dateTaken);
            allFiles.Add(file);
        }
    
        promptVis = "hidden";
        filterVis = "hidden";
        albumSelectorVis = "hidden";
        neitherChecked = false;
        warningChecked = false;
        errorChecked = false;
        infoChecked = true;
    }

    private static void UpdateStatus() => status = allFiles.Count == 0 ? "No files found to add" : $"{allFiles.Select(f => f.thumbnail != null).Count()} pictures and {0} videos pending upload. {allFiles.Count(c => !c.dataPresent)} Warnings. {allFiles.Count(c => c.alreadyInLib)} Errors.";

    //Clears an item from the Lists
    private static void DeleteBtnClick(int index, string path)
    {
        //TODO: yes. Could this be better? like pass in something else? Just path? Just something else?
        // pngPaths.Remove(path);
        // jpgPaths.Remove(path);
        // allFullPaths.RemoveAt(index); Might have to keep?
        // dateTakenList.RemoveAt(index);
        // dataPresentList.RemoveAt(index);
        allFiles.RemoveAt(index);
        UpdateStatus();
    }

    //Adds all the items to photo library, and, if applicable, any albums.
    //todo: yes
    private void AddItems()
    {
        int rowsAffected = 0;
        
        for (int p = 0; p < allFullPaths.Count; p++)
        {
            if (alreadyInLib[p]) continue; //Ignore duplicates

            string filename = Path.GetFileName(allFullPaths[p]);
            string newDir = GenerateSortedDir(dateTakenList[p]);
            string newPath = Path.Combine(newDir, filename); //Used for moving to new home on server.
            
            string newShortPath = Path.Combine(GenerateDatePath(dateTakenList[p]), filename); //Don't need full path, just the short path (/2021/10 October/...).
            allShortPaths.Add(newShortPath);
            Directory.CreateDirectory(newDir);

            GC.Collect(); //Dumb but it prevents file in use error for File.Move. https://stackoverflow.com/a/21137207
            GC.WaitForPendingFinalizers();
            try
            {
                //TODO
                // File.Move(allFullPaths[p], newPath);
                // rowsAffected += C.InsertMedia(newShortPath, dateTakenList[p]);
            }
            catch (IOException e)
            {
                Console.WriteLine(e.Message);
            }
        }
        
        albumSelector.ConfirmBtnClick();
        status = $"Added {rowsAffected} items to library";
        allFullPaths.Clear();
        albumSelectorVis = "hidden";
    }

    private static void DeleteErrorsBtnClick()
    {
        promptVis = "visible";
        int count = alreadyInLib.Count(c => c); //Get number of items with errors.
        message = $"Are you sure you want to DELETE all {count} items with errors from pss_upload?";
    }

    //Permanently deletes every item in the upload folder that is marked with an error (already on server).
    private void DeleteErrors()
    {
        for (int i = 0; i < allFullPaths.Count; i++)
        {
            if (!alreadyInLib[i]) continue;
            
            string path = allFullPaths[i];
            int index = allFullPaths.IndexOf(path);
            allFullPaths.RemoveAt(index);
            dateTakenList.RemoveAt(index);
            dataPresentList.RemoveAt(index);
            alreadyInLib.RemoveAt(index);
            File.Delete(path);
            i--; //Necessary when deleting from Lists iteratively like this: "because if you remove something from the middle of the list then the next item you want to check is at the same index as the one you just deleted"
        }
        promptVis = "hidden";
        StateHasChanged();
    }

    //Create a short path like this: /2021/10 October/ from a DateTime with values like year: 2021, month: 10, etc. This is what the database stores.
    public static string GenerateDatePath(DateTime dateTaken) => Path.Combine(dateTaken.Year.ToString(), $"{dateTaken.Month} {System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(dateTaken.Month)}");
    
    //This is for moving the file to its new home on the server. This is the full path to the item on the server.
    public static string GenerateSortedDir(DateTime dateTaken) => Path.Combine(S.libFolderFullPath, GenerateDatePath(dateTaken));
    
    //Get if an item is already on the server (already in your library).
    private static bool ItemExists(string filename, DateTime dateTaken) => File.Exists(Path.Combine(GenerateSortedDir(dateTaken), Path.GetFileName(filename)));

    ///<summary>
    ///Given the full final path where the video file will end up on the server, generate a temporary compressed thumbnail file for it,
    ///turn that into its base64 representation, and return the base64 string.<br/>
    ///Something to note is these files are created in pss_tmp and should be deleted automatically by the function when it finishes.
    ///However it is recommended to clear this folder before using this function, because if there is somehow an item with the same name in
    ///there already, the ffmpeg command will prompt if you want to overwrite it, and the program will just get stuck there
    ///indefinitely as PSS has no way to respond. So, when in doubt, clear pss_temp before calling this function. 
    ///</summary>
    ///<param name="videoFullFinalPath">The full path to where the video file either is right now, or where it will be.</param>
    public static string GenerateThumbnail(string videoFullFinalPath)
    {
        //First create the thumbnail from the first frame of the video file.
        //https://stackoverflow.com/questions/4425413/how-to-extract-the-1st-frame-and-restore-as-an-image-with-ffmpeg/4425466
        //Store this file in the tmp folder and name it as the same name as the video file except with the extension '.tmp.jpg'.
        string thumbnailFullPath = Path.Combine(S.tmpFolderPath, $"{Path.GetFileNameWithoutExtension(videoFullFinalPath)}.tmp.jpg");
        
        //Something to note is this command produces a bunch of stupid output and also says it failed but it still produces the thumbnail so... ¯\_(ツ)_/¯ 
        ProcessStartInfo ffmpegInfo = new()
        {
            CreateNoWindow = true,
            FileName = "ffmpeg",
            Arguments = $"-i \"{videoFullFinalPath}\" -vf \"select=eq(n\\,0)\" -vf scale=320:-2 -q:v 25 \"{thumbnailFullPath}\""
        };
        Process ffmpegProcess = Process.Start(ffmpegInfo);
        ffmpegProcess!.WaitForExit();

        byte[] bytes = File.ReadAllBytes(thumbnailFullPath);

        //Then delete the thumbnail as it's no longer required.
        File.Delete(thumbnailFullPath);
        
        //Then convert that file's bytes into its base64 equivalent. This is stored in the DB as the thumbnail (no actual file required).
        return Convert.ToBase64String(bytes);
    }
}