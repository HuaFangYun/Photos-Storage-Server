@page "/apply-upload"
@using System.IO
@using System.Globalization
@using PSS.Backend

<title>Apply Upload</title>
<link href="css/UploadApply.css" rel="stylesheet">

<header>
    <button class="textBtn" @onclick="@(() => filterVis = filterVis == "hidden" ? "visible" : "hidden")" title="This filter thing sucks I know but how it works is check neither, warning, or error (just 1 at a time) to show just those items">
        <span class="material-icons-outlined">filter_list</span><span>Filter Items</span>
    </button>
    
    <button class="textBtn" @onclick="AddItems">
        <span class="material-icons-outlined">add_photo_alternate</span><span>Add to Library</span>
    </button>
    
    <button class="textBtn" @onclick="DeleteErrorsBtnClick">
        <span class="material-icons-outlined">delete_forever</span><span>Delete Errors</span>
    </button>

    <button class="textBtn" @onclick="@(() => albumSelectorVis = albumSelectorVis == "visible" ? "hidden" : "visible")">
        <span class="material-icons-outlined">@(albumSelectorVis == "visible" ? "image_not_supported" : "image")</span><span>@(albumSelectorVis == "visible" ? "Hide Albums" : "Show Albums")</span>
    </button>

    <span id="statusSpan">@status</span>
</header>

<div id="filter" style="visibility: @filterVis">
    <label><input type="checkbox" @bind="@neitherChecked">Neither</label>
    <label style="color: yellow"><input type="checkbox" @bind="@warningChecked">Warning</label>
    <label style="color: red"><input type="checkbox" @bind="@errorChecked">Error</label>
    <label style="color: #93ccdc"><input type="checkbox" @bind="@infoChecked">Show Info</label>
</div>

<TwoChoiceInput TwoChoiceVis="@promptVis" YesBtnClick="@(() => DeleteErrors())" NoBtnClick="@(() => { promptVis = "hidden"; StateHasChanged(); })" Message="@message"/>
<AlbumSelector @ref="@albumSelector" AlbumsVis="@albumSelectorVis" SelectedItems="@allShortPaths" ShowCheckCancelButtons="false"/>

@{
    GC.Collect();
    GC.WaitForPendingFinalizers();
    UpdateStatus();

    <div id="mainDiv">
        @for (int i = 0; i < allPaths.Count; i++)
        {
            if (warningChecked && dataPresentList[i]) continue; //If this item doesn't have a warning skip it
            if (errorChecked && alreadyInLib[i] == false) continue; //If this item has an error skip it
            if (neitherChecked && !dataPresentList[i] && !alreadyInLib[i]) continue; //Only show items with no warnings or errors
            
            int ii = i; @*Using just i caused crash*@
            string path = allPaths[i].Replace('\\', '/');
            string ext = Path.GetExtension(path);

            //shortPath is relative to wwwroot
            string shortPath = path.Replace(PSS.Settings.uploadRootPath, "");
            shortPath = Path.GetFileName(PSS.Settings.uploadRootPath) + shortPath;
            
            string name = Path.GetFileName(path);
            string dateString = dateTakenList[i].ToString("ddd, MMM d, yyy");
            
            <div class="itemDiv">
                @if (ext is ".jpg" or ".jpeg" or ".png")
                {
                    <img title="Click for Full Size Preview" onclick="window.open('@shortPath', '_blank').focus();" src="@shortPath" alt="" loading="lazy"/>
                }

                <span title="@name" class="filenameSpan">@name</span>
                <span title="@dateString" class="dateTakenSpan">@dateString</span>
                @if (!alreadyInLib[i]){<input title="Choose New Date Taken" type="datetime-local" @bind="@dateTakenList[ii]" @bind:event="oninput">}
                @if (infoChecked && dataPresentList[i]){<span class="infoSpan">@dtSrc[i].ToString()</span>} @*Don't display now if DT is set to now*@
                @if (!dataPresentList[i] && !alreadyInLib[i]){<span class="warnSpan">No DT found. DT set to now.</span>}
                @if (alreadyInLib[i]){<span class="errorSpan">Item already in library. Won't upload.</span>}
                
                <button class="iconBtn" title="Remove This Item From the Upload" @onclick="@(() => DeleteBtnClick(ii, allPaths[ii]))"><span class="material-icons">close</span></button>
            </div>
        }
    </div>
}

@code{
    AlbumSelector albumSelector = new();

    private static string status;
    private static List<string> pngPaths;
    private static List<string> jpgPaths;
    private static List<string> allPaths;
    private static List<string> allShortPaths; //Passed in to AlbumSelector and set in AddItems().
    private static List<DateTime> dateTakenList;
    private static List<bool> dataPresentList; //Any files where PSS couldn't determine date taken and is defaulting to DateTime.Now
    private static List<bool> alreadyInLib; //True if the item is already on the server (in your library).
    private static List<Metadata.DateTakenSrc> dtSrc;
    
    private static string promptVis;
    private static string message;
    
    //Filtering
    private static string filterVis;
    private static bool neitherChecked;
    private static bool warningChecked;
    private static bool errorChecked;
    private static bool infoChecked;

    private static string albumSelectorVis;

    protected override void OnInitialized()
    {
        pngPaths = Directory.GetFiles(PSS.Settings.uploadRootPath, "*.png", SearchOption.AllDirectories).ToList();
        jpgPaths = Directory.GetFiles(PSS.Settings.uploadRootPath, "*.jp*g", SearchOption.AllDirectories).ToList();
        allPaths = new List<string>(pngPaths.Concat(jpgPaths).ToArray());
        allShortPaths = new List<string>();
        dateTakenList = (from path in allPaths select new DateTime()).ToList();
        dataPresentList = (from path in allPaths select new bool()).ToList();
        dtSrc = (from path in allPaths select Metadata.DateTakenSrc.Now).ToList(); //Now = default
        alreadyInLib = (from path in allPaths select new bool()).ToList();

        promptVis = "hidden";
        filterVis = "hidden";
        neitherChecked = false;
        warningChecked = false;
        errorChecked = false;
        infoChecked = true;

        for (int i = 0; i < allPaths.Count; i++)
        {
            (dataPresentList[i], dtSrc[i]) = Metadata.GetDateTaken(allPaths[i], out DateTime dateTaken);
            dateTakenList[i] = dateTaken;
            alreadyInLib[i] = ItemExists(Path.GetFileName(allPaths[i]), dateTakenList[i]);
        }
    }

    private static void UpdateStatus() => status = allPaths.Count == 0 ? "No files found to add" : $"{pngPaths.Count + jpgPaths.Count} pictures and {0} videos pending upload. {dataPresentList.Count(c => !c)} Warnings. {alreadyInLib.Count(c => c)} Errors.";

    //Clears an item from the Lists
    private static void DeleteBtnClick(int index, string path)
    {
        pngPaths.Remove(path);
        jpgPaths.Remove(path);
        allPaths.RemoveAt(index);
        dateTakenList.RemoveAt(index);
        dataPresentList.RemoveAt(index);
        UpdateStatus();
    }

    //Adds all the items to photo library, and, if applicable, any albums.
    private void AddItems()
    {
        int rowsAffected = 0;
        
        for (int p = 0; p < allPaths.Count; p++)
        {
            if (alreadyInLib[p]) continue; //Ignore duplicates

            string filename = Path.GetFileName(allPaths[p]);
            string newDir = GenerateSortedDir(dateTakenList[p]);
            string newPath = Path.Combine(newDir, filename); //Used for moving to new home on server.
            
            string newShortPath = Path.Combine(GenerateDatePath(dateTakenList[p]), filename); //Don't need full path, just the short path (/2021/10 October/...).
            allShortPaths.Add(newShortPath);
            Directory.CreateDirectory(newDir);

            GC.Collect(); //Dumb but it prevents file in use error for File.Move. https://stackoverflow.com/a/21137207
            GC.WaitForPendingFinalizers();
            try
            {
                File.Move(allPaths[p], newPath);
                rowsAffected += Connection.InsertMedia(newShortPath, dateTakenList[p]);
            }
            catch (IOException e)
            {
                Console.WriteLine(e.Message);
            }
        }
        
        albumSelector.ConfirmBtnClick();
        status = $"Added {rowsAffected} items to library";
        allPaths.Clear();
        albumSelectorVis = "hidden";
    }

    private static void DeleteErrorsBtnClick()
    {
        promptVis = "visible";
        int count = alreadyInLib.Count(c => c); //Get number of items with errors.
        message = $"Are you sure you want to DELETE all {count} items with errors from pss_upload?";
    }

    //Permanently deletes every item in the upload folder that is marked with an error (already on server).
    private void DeleteErrors()
    {
        for (int i = 0; i < allPaths.Count; i++)
        {
            if (!alreadyInLib[i]) continue;
            
            string path = allPaths[i];
            int index = allPaths.IndexOf(path);
            allPaths.RemoveAt(index);
            dateTakenList.RemoveAt(index);
            dataPresentList.RemoveAt(index);
            alreadyInLib.RemoveAt(index);
            File.Delete(path);
            i--; //Necessary when deleting from Lists iteratively like this: "because if you remove something from the middle of the list then the next item you want to check is at the same index as the one you just deleted"
        }
        promptVis = "hidden";
        StateHasChanged();
    }

    //Create a short path like this: /2021/10 October/ from a DateTime with values like year: 2021, month: 10, etc. This is what the database stores.
    public static string GenerateDatePath(DateTime dateTaken) => Path.Combine(dateTaken.Year.ToString(), $"{dateTaken.Month} {CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(dateTaken.Month)}");
    
    //This is for moving the file to its new home on the server. This is the full path to the item on the server.
    public static string GenerateSortedDir(DateTime dateTaken) => Path.Combine(PSS.Settings.libFolderFullPath, GenerateDatePath(dateTaken));
    
    //Get if an item is already on the server (already in your library).
    private static bool ItemExists(string filename, DateTime dateTaken) => File.Exists(Path.Combine(GenerateSortedDir(dateTaken), Path.GetFileName(filename)));
}