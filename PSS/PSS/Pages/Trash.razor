@page "/trash"
@inject NavigationManager navigationManager;

<title>Trash - PSS</title>
<link href="css/Trash.css" rel="stylesheet"/>

@{
    <header>
        <button class="iconBtn" id="clearBtn" style="visibility: @(selectedItems.Count == 0 ? "hidden" : "visible")" @onclick="ClearChecks"><span class="material-icons-outlined">close</span></button>
        <span id="selectedAmtText" style="visibility: @(selectedItems.Count == 0 ? "hidden" : "visible")">@selectedItems.Count selected</span>
        <div>
            <button class="textBtn" @onclick="@(() => F.VisToggle(ref sortDivVis))"><span class="material-icons-outlined">sort</span><span>@sortBtnText</span></button>
            <button class="textBtn" @onclick="RestoreBtnClick"><span class="material-icons-outlined">restore_from_trash</span><span>@(selectedItems.Count == 0 ? "Restore ALL" : "Restore Selected")</span></button>
            <button class="textBtn" @onclick="DeleteBtnClick"><span class="material-icons-outlined">delete_forever</span><span>@(selectedItems.Count == 0 ? "Delete ALL" : "Delete Selected")</span></button>
        </div>
    </header>
    
    <div id="sortDiv" style="visibility: @sortDivVis">
        <button @onclick="@(() => ChangeOrder(C.TrashSortMode.DateDeleted))">
            <span class="material-icons-outlined" style="@(mode == C.TrashSortMode.DateDeleted ? "color: #1a73e8" : "visibility: hidden")">check</span>
            <span class="btnText" style="color: @(mode == C.TrashSortMode.DateDeleted ? "#1a73e8" : "white")">Date Deleted</span>
        </button>
        <button @onclick="@(() => ChangeOrder(C.TrashSortMode.DateTaken))">
            <span class="material-icons-outlined" style="@(mode == C.TrashSortMode.DateTaken ? "color: #1a73e8" : "visibility: hidden")">check</span>
            <span class="btnText" style="color: @(mode == C.TrashSortMode.DateTaken ? "#1a73e8" : "white")">Date Taken</span>
        </button>
        <button @onclick="@(() => ChangeOrder(C.TrashSortMode.DateDeletedReversed))">
            <span class="material-icons-outlined" style="@(mode == C.TrashSortMode.DateDeletedReversed ? "color: #1a73e8" : "visibility: hidden")">check</span>
            <span class="btnText" style="color: @(mode == C.TrashSortMode.DateDeletedReversed ? "#1a73e8" : "white")">Date Deleted Reversed</span>
        </button>
        <button @onclick="@(() => ChangeOrder(C.TrashSortMode.DateTakenReversed))">
            <span class="material-icons-outlined" style="@(mode == C.TrashSortMode.DateTakenReversed ? "color: #1a73e8" : "visibility: hidden")">check</span>
            <span class="btnText" style="color: @(mode == C.TrashSortMode.DateTakenReversed ? "#1a73e8" : "white")">Date Taken Reversed</span>
        </button>
    </div>
    
    <TwoChoiceInput @bind-TwoChoiceVis="@choiceVis" YesBtnClick="@yesBtnFunc" NoBtnClick="@CloseChoiceDiv" Message="@choiceMsg"/>

    if (mediaTrashList.Count == 0)
    {
        <h1>Trash is empty</h1>
    }
    else
    {
        <div id="mainDiv">
            @foreach (C.MediaRow media in mediaTrashList)
            {
                <div class="thumbnail">
                    @if (media.starred) {<span class="material-icons-outlined star-icon">star</span>}
                    <span @onclick="@(() => ToggleCheck(media.path))" id="@media.path" class="material-icons checkbox unchecked">check_circle</span>
                    @if (media.thumbnail != null) //Video
                    {
                        <span class="material-icons-outlined video-icon">play_circle_outline</span>
                        <img @onclick="@(() => ImgClicked(media.path))" src="data:image/jpg;base64,@media.thumbnail" alt="@S.LIB_REQUEST_PATH/@media.path" loading="lazy"/>
                    }
                    else
                    {
                        <img @onclick="@(() => ImgClicked(media.path))" src="@S.LIB_REQUEST_PATH/@media.path" alt="@S.LIB_REQUEST_PATH/@media.path" loading="lazy"/>
                    }
                </div>
            }
        </div>
    }
}

@code {
    private static List<C.MediaRow> mediaTrashList;
    private static List<string> selectedItems; //Stores all items (paths) user selected. If unchecked, removed from list.

    private static string sortBtnText;
    private static string sortDivVis;
    private static C.TrashSortMode mode;

    private static string choiceVis;
    private static Action yesBtnFunc;
    private static string choiceMsg;

    private static bool shiftDown;
    private static int lastIndex;
    private async Task getShiftDown() => shiftDown = await JSRuntime.InvokeAsync<bool>("getShiftDown");
    
    private static bool ctrlDown;
    private async Task GetCtrlDown() => ctrlDown = await JSRuntime.InvokeAsync<bool>("getCtrlDown");
    
    protected override void OnInitialized()
    {
        mediaTrashList = C.LoadMediaTrashTable();
        selectedItems = new List<string>(); //Reset on page load/refresh
        SetSortBtnText();
        mode = C.TrashSortMode.DateDeleted; //Default sort mode
        choiceVis = "hidden";
        sortDivVis = "hidden";
    }

    private static void SetSortBtnText()
    {
        sortBtnText = mode switch
        {
            C.TrashSortMode.DateDeleted => "Date Deleted",
            C.TrashSortMode.DateTaken => "Date Taken",
            C.TrashSortMode.DateDeletedReversed => "Date Deleted Reversed",
            C.TrashSortMode.DateTakenReversed => "Date Taken Reversed",
            _ => "Date Deleted"
        };
    }
    
    private async void ChangeOrder(C.TrashSortMode newMode)
    {
        mode = newMode;
        mediaTrashList = C.LoadMediaTrashTable(newMode);
        SetSortBtnText();
        sortDivVis = "hidden";
        await ClearChecks();
        StateHasChanged();
    }

    [Inject] //https://code-maze.com/how-to-call-javascript-code-from-net-blazor-webassembly/
    public IJSRuntime JSRuntime { get; set; }

    private async Task ToggleCheck(string id) //id = string path
    {
        string newClass = await JSRuntime.InvokeAsync<string>("toggleCheck", id);
        if (newClass.Contains("unchecked"))
            selectedItems.Remove(id);
        else if (!selectedItems.Contains(id)) //Needed to prevent adding dupes when shift clicking
            selectedItems.Add(id);

        //Get mediaList currentIndex of latest selected thing. Needed only for shift click
        int index = -1;
        for (int i = 0; i < mediaTrashList.Count; i++)
        {
            if (mediaTrashList[i].path != id) continue;
            index = i;
            break;
        }

        await getShiftDown();
        if (!shiftDown) //Not shift click so just select 1 item like normal.
        {
            lastIndex = index;
            return;
        }
        await ShiftClick(index); //Select multiple.
    }
    
    //Add items from start to end into selectedItems. Used for ShiftClick.
    private async Task AddSelected(int startIndex, int endIndex)
    {
        for (int i = startIndex; i <= endIndex; i++)
        {
            string currentID = mediaTrashList[i].path;
            if (selectedItems.Contains(currentID)) continue;
            selectedItems.Add(currentID);
            await ToggleCheck(currentID);
        }
    }

    //If shift was held down select multiple things
    private async Task ShiftClick(int currentIndex)
    {
        //First item is on left and item shift clicked is right. E.g., ###1####2### Loop from 1 --> 2, and add stuff in between to selected items
        if (lastIndex < currentIndex)
            await AddSelected(lastIndex, currentIndex);
        else if (lastIndex > currentIndex) //Same as above but swap 1 and 2 and the direction.
            await AddSelected(currentIndex, lastIndex);
    }

    private async Task ClearChecks()
    {
        foreach (string item in selectedItems)
            await JSRuntime.InvokeAsync<string>("removeCheck", item);
        selectedItems.Clear();
        choiceVis = "hidden";
    }
    
    private async Task ImgClicked(string path)
    {
        await GetCtrlDown();
        if (selectedItems.Count > 0 || ctrlDown)
            await ToggleCheck(path);
    }

    //Show choice div
    private void RestoreBtnClick()
    {
        if (mediaTrashList.Count == 0) return;
        if (S.showPrompts == false)
        {
            RestoreItems();
            return;
        }

        yesBtnFunc = RestoreItems;
        
        choiceVis = "visible";
        choiceMsg = selectedItems.Count switch
        {
            0 => "Restore Everything?",
            1 => "Restore Selected Item?",
            _ => "Restore Selected Items?"
        };
    }

    private async void RestoreItems()
    {
        //Restore ALL
        if (selectedItems.Count == 0)
            foreach (C.MediaRow item in mediaTrashList) C.RestoreItem(item.uuid);
        else //Restore selected
        {
            foreach (string item in selectedItems)
            {
                await JSRuntime.InvokeAsync<string>("removeCheck", item);
                //C.RestoreItem(item); TODO
            }
        }
        await ClearChecks();
        mediaTrashList = C.LoadMediaTrashTable();
        selectedItems.Clear();
        StateHasChanged();
    }

    //Show choice div
    private void DeleteBtnClick()
    {
        if (mediaTrashList.Count == 0) return;
        if (S.showPrompts == false)
        {
            DeleteItems();
            return;
        }

        yesBtnFunc = DeleteItems;

        choiceVis = "visible";
        choiceMsg = selectedItems.Count switch
        {
            0 => "PERMANENTLY Delete Everything?",
            1 => "PERMANENTLY Delete Selected Item?",
            _ => "PERMANENTLY Delete Selected Items?"
        };
    }

    private async void DeleteItems()
    {
        if (selectedItems.Count == 0) //Delete ALL
            foreach (C.MediaRow item in mediaTrashList) C.PermDeleteItem(item.uuid);
        else //Delete selected
        {
            foreach (string item in selectedItems)
            {
                await JSRuntime.InvokeAsync<string>("removeCheck", item);
                //C.PermDeleteItem(item); TODO
            }
        }
        await ClearChecks();
        mediaTrashList = C.LoadMediaTrashTable();
        selectedItems.Clear();
        StateHasChanged();
    }

    private void CloseChoiceDiv()
    {
        choiceVis = "hidden";
        StateHasChanged();
    }
}