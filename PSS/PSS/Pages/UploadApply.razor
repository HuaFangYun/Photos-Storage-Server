@page "/apply-upload"

<title>Apply Upload - PSS</title>
<link href="css/UploadApply.css" rel="stylesheet">

<header>
    <button class="textBtn" @onclick="@(() => F.VisToggle(ref filterVis))" title="This filter thing sucks I know but how it works is check neither, warning, or error (just 1 at a time) to show just those items">
        <span class="material-icons-outlined">filter_list</span><span>Filter Items</span>
    </button>

    <button class="textBtn" @onclick="AddItems">
        <span class="material-icons-outlined">add_photo_alternate</span><span>Add to Library</span>
    </button>

    <button class="textBtn" @onclick="@(() => { promptVis = "visible"; message = $"Are you sure you want to DELETE all {allFiles.Count(f => f.alreadyInLib)} items with errors from pss_upload?"; })">
        <span class="material-icons-outlined">delete_forever</span><span>Delete Errors</span>
    </button>

    <button class="textBtn" @onclick="@(() => F.VisToggle(ref albumSelectorVis))">
        <span class="material-icons-outlined">@(albumSelectorVis == "visible" ? "image_not_supported" : "image")</span><span>@(albumSelectorVis == "visible" ? "Hide Albums" : "Show Albums")</span>
    </button>

    <span id="statusSpan">@status</span>
</header>

<div id="filter" style="visibility: @filterVis">
    <label><input type="checkbox" @bind="@neitherChecked">Neither</label>
    <label style="color: yellow"><input type="checkbox" @bind="@warningChecked">Warning (No DT)</label>
    <label style="color: red"><input type="checkbox" @bind="@errorChecked">Error (Already in Lib)</label>
    <label style="color: #00af00"><input type="checkbox" @bind="@infoChecked">Show Info</label>
</div>

<TwoChoiceInput TwoChoiceVis="@promptVis" YesBtnClick="@(() => DeleteErrors())" NoBtnClick="@(() => { promptVis = "hidden"; StateHasChanged(); })" Message="@message"/>
<AlbumSelector @ref="@albumSelector" AlbumsVis="@albumSelectorVis" SelectedItems="@allGuids" ShowCheckCancelButtons="false"/>

<KeyboardShortcuts AltA="@(() => { F.VisToggle(ref albumSelectorVis); StateHasChanged(); })" />

@{
    GC.Collect();
    GC.WaitForPendingFinalizers();

    <div id="mainDiv">
        @for (int i = 0; i < allFiles.Count; i++)
        {
            if (warningChecked && allFiles[i].dateTaken == null) continue; //If this item doesn't have a warning skip it
            if (errorChecked && allFiles[i].alreadyInLib == false) continue; //If this item has an error skip it
            if (neitherChecked && allFiles[i].dateTaken != null && !allFiles[i].alreadyInLib) continue; //Only show items with no warnings or errors
            
            int ii = i; @*Necessary for some things like the <input>'s*@
            string dateString = allFiles[i].dateTaken == null ? "None" : allFiles[i].dateTaken?.ToString("ddd, MMM d, yyy h:mm:ss tt"); 
            
            //Get the short path to this item relative to pss_upload.
            string ogShortPath = Path.Join("pss_upload", allFiles[i].fullPath.Replace(S.uploadFolderPath!, null));

            <div class="itemDiv">
            @{
                <img title="Click for Full Size Preview" onclick="window.open('@ogShortPath', '_blank').focus();" src=@(allFiles[i].thumbnail == null ? ogShortPath : "data:image/jpg;base64," + allFiles[i].thumbnail) alt="" loading="lazy"/>
                <span class="filenameSpan">@Path.GetFileName(ogShortPath)</span>
                <span title="@dateString" class="dateTakenSpan">@dateString</span>
                                                                           
                if (!allFiles[i].alreadyInLib){<input title="Choose New Date Taken" type="datetime-local" @bind="@allFiles[ii].dateTaken" @bind:event="oninput">}
                if (infoChecked){<span class="infoSpan">@($"DT Source: {allFiles[i].dateTakenSrc}")</span>}
                if (allFiles[i].dateTaken == null && !allFiles[i].alreadyInLib){<span class="warnSpan">No DT found.</span>}
                if (allFiles[i].alreadyInLib){<span class="errorSpan">Item already in library. Won't upload.</span>}
                
                <button class="iconBtn" title="Remove This Item From the Upload" @onclick="@(() => { allFiles.RemoveAt(ii); UpdateStatus(); })"><span class="material-icons">close</span></button>
            }
            </div>
        }
    </div>
}

@code{
    private static AlbumSelector albumSelector = new();

    private static List<Guid> allGuids; //Passed in to AlbumSelector and gets items added in AddItems().
    private static List<string> allFullPaths;
    private static List<C.UploadFile> allFiles;

    private static string status;
    private static string promptVis;
    private static string message;
    
    //Filtering
    private static string filterVis;
    private static bool neitherChecked;
    private static bool warningChecked;
    private static bool errorChecked;
    private static bool infoChecked;

    private static string albumSelectorVis;
    
    protected override void OnInitialized()
    {
        allGuids = new List<Guid>();
        allFullPaths = F.GetSupportedFiles(S.uploadFolderPath);
        allFiles = new List<C.UploadFile>(allFullPaths.Count);

        foreach (string fullPath in allFullPaths)
        {
            C.UploadFile file = new()
            {
                fullPath = fullPath.Replace('\\', '/'),
                thumbnail = Path.GetExtension(fullPath).ToLower() is ".mp4" or ".mkv" or ".mov" ? F.GenerateThumbnail(fullPath) : null,
                uuid = Guid.NewGuid()
            };
            file.dateTaken = D.GetDateTakenAuto(fullPath, out file.dateTakenSrc);
            file.alreadyInLib = ItemInLibrary(file.dateTaken, Path.GetFileName(fullPath));
            allFiles.Add(file);
        }
    
        promptVis = "hidden";
        filterVis = "hidden";
        albumSelectorVis = "hidden";
        neitherChecked = false;
        warningChecked = false;
        errorChecked = false;
        infoChecked = true;
    }
}

@functions{
    //Checks to see if there is a file on the server with the same name and date path.
    private static bool ItemInLibrary(DateTime? dateTaken, string filename) => File.Exists(C.CreateFullPath(dateTaken, filename));

    private static void UpdateStatus() => status = allFiles.Count == 0 ? "No files found to add" : $"{allFiles.Select(f => f.thumbnail == null).Count()} pictures and {allFiles.Select(f => f.thumbnail != null).Count()} videos pending upload. {allFiles.Count(f => f.dateTaken == null)} Warnings. {allFiles.Count(f => f.alreadyInLib)} Errors.";

    //Permanently deletes every item in the upload folder that is marked with an error (already on server).
    private void DeleteErrors()
    {
        foreach (C.UploadFile file in allFiles.Where(file => file.alreadyInLib))
        {
            allFiles.Remove(file);
            File.Delete(file.fullPath);
        }
        promptVis = "hidden";
        StateHasChanged();
    }

    //Adds all the items to photo library, and, if applicable, any albums.
    private static void AddItems()
    {
        int rowsAffected = 0;
        
        foreach (C.UploadFile file in allFiles)
        {
            if (file.alreadyInLib) continue; //Ignore duplicates

            string filename = Path.GetFileName(file.fullPath);
            string newShortPath = C.CreateShortPath(file.dateTaken, filename).Replace('\\', '/');
            allGuids.Add(file.uuid);
            Directory.CreateDirectory(C.CreateFullDateFolderPath(file.dateTaken));

            GC.Collect(); //Dumb but it prevents file in use error for File.Move. https://stackoverflow.com/a/21137207
            GC.WaitForPendingFinalizers();
            try
            {
                File.Move(file.fullPath!, C.CreateFullPath(file.dateTaken, filename));
                rowsAffected += C.InsertMedia(newShortPath, file.dateTaken, file.uuid, file.thumbnail);
            }
            catch (IOException e)
            {
                Console.WriteLine(e.Message);
            }
        }
        
        albumSelector.ConfirmBtnClick();
        status = $"Added {rowsAffected} items to library";
        allFiles.Clear();
        albumSelectorVis = "hidden";
    }
}