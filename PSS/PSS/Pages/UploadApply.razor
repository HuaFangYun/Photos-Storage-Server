@* @page "/apply-upload" *@
@* @using Microsoft.VisualBasic.FileIO *@
@* *@
@* <title>Apply Upload - PSS</title> *@
@* <link href="css/UploadApply.css" rel="stylesheet"> *@
@* *@
@* <header> *@
@*     <button class="textBtn" @onclick="@(() => F.VisToggle(ref filterVis))" title="This filter thing sucks I know but how it works is check neither, warning, or error (just 1 at a time) to show just those items"> *@
@*         <span class="material-icons-outlined">filter_list</span><span>Filter Items</span> *@
@*     </button> *@
@* *@
@*     <button class="textBtn" @onclick="@AddItemsBtnClick"> *@
@*         <span class="material-icons-outlined">add_photo_alternate</span><span>Add to Library</span> *@
@*     </button> *@
@* *@
@*     <button class="textBtn" @onclick="@(() => { promptVis = "visible"; message = $"Are you sure you want to DELETE all {allFiles.Count(f => f.alreadyInLib)} items with errors from pss_upload?"; })"> *@
@*         <span class="material-icons-outlined">delete_forever</span><span>Delete Errors</span> *@
@*     </button> *@
@* *@
@*     <button class="textBtn" @onclick="@(() => F.VisToggle(ref collectionSelectorVis))"> *@
@*         <span class="material-icons-outlined">@(collectionSelectorVis == "visible" ? "image_not_supported" : "image")</span><span>@(collectionSelectorVis == "visible" ? "Hide Collections" : "Show Collections")</span> *@
@*     </button> *@
@* *@
@*     <span style="display: @statusDisplay" id="statusSpan">@status</span> *@
@*     <progress style="display: @progressDisplay" max="@progressMax" value="@progressValue"></progress> *@
@* </header> *@
@* *@
@* <div id="filter" style="visibility: @filterVis"> *@
@*     <label><input type="checkbox" @bind="@neitherChecked">Neither</label> *@
@*     <label style="color: yellow"><input type="checkbox" @bind="@warningChecked">Warning (No DT)</label> *@
@*     <label style="color: red"><input type="checkbox" @bind="@errorChecked">Error (Already in Lib)</label> *@
@*     <label style="color: #00af00"><input type="checkbox" @bind="@infoChecked">Show Info</label> *@
@* </div> *@
@* *@
@* <TwoChoiceInput TwoChoiceVis="@promptVis" YesBtnClick="@DeleteErrors" NoBtnClick="@(() => { promptVis = "hidden"; StateHasChanged(); })" Message="@message"/> *@
@* <TwoChoiceInput TwoChoiceVis="@addItemsPromptVis" YesBtnClick="@AddItemsBtnClick" NoBtnClick="@(() => { addItemsPromptVis = "hidden"; StateHasChanged(); })" Message="Add All Items to Your Library and Any Album(s)/Folder?"/> *@
@* <CollectionSelector @ref="@collectionSelector" CollectionsVis="@collectionSelectorVis" SelectedItems="@allGuids" ShowCheckCancelButtons="false"/> *@
@* *@
@* <KeyboardShortcuts AltA="@AddItemsBtnClick" AltC="@(() => { F.VisToggle(ref collectionSelectorVis); StateHasChanged(); })" AltF="@(() => { F.VisToggle(ref filterVis); StateHasChanged(); })" CtrlD="@DeleteErrors"/> *@
@* <ShortcutsReference AltAText="Add Items to Library and Album(s)/Folder" AltCText="Show/Hide CollectionSelector" AltFText="Show/Hide Filter" CtrlDText="Delete All Items with Errors"/> *@
@* *@
@* <ProgressPopUp Message="@popupMsg" Height="400" Width="400" Visible="@popupVisible"/> *@
@* @{ *@
@*     GC.Collect(); *@
@*     GC.WaitForPendingFinalizers(); *@
@* *@
@*     <div id="mainDiv"> *@
@*         @for (int i = 0; i < allFiles.Count; i++) *@
@*         { *@
@*             if (warningChecked && allFiles[i].dateTaken != null) continue; //If this item doesn't have a warning skip it *@
@*             if (errorChecked && allFiles[i].alreadyInLib == false) continue; //If this item has an error skip it *@
@*             if (neitherChecked && allFiles[i].dateTaken != null && !allFiles[i].alreadyInLib) continue; //Only show items with no warnings or errors *@
@*              *@
@*             int ii = i; $1$Necessary for some things like the <input>'s#1# *@
@*             string dateString = allFiles[i].dateTaken == null ? "None" : allFiles[i].dateTaken?.ToString("ddd, MMM d, yyy h:mm:ss tt");  *@
@* *@
@*             <div class="itemDiv"> *@
@*             @{ *@
@*                 <img title="Click for Full Size Preview" onclick="window.open('@allFiles[i].shortPath', '_blank').focus();" src=@(allFiles[i].thumbnail == null ? allFiles[i].shortPath : "data:image/jpg;base64," + allFiles[i].thumbnail) alt="" loading="lazy"/> *@
@*                 <input class="filename" @bind=@allFiles[ii].filename @bind:event="oninput" @onchange="@(() => { allFiles[ii].alreadyInLib = ItemInLibrary(allFiles[ii].dateTaken, allFiles[ii].filename + allFiles[ii].extension); StateHasChanged(); })"/> *@
@*                 <span title="@dateString" class="dateTakenSpan">@dateString</span> *@
@* *@
@*                 if (allFiles[i].dateTaken == null && !allFiles[i].alreadyInLib){<span class="warnSpan">Unknown Date Taken</span>} *@
@*                 if (!allFiles[i].alreadyInLib){<input title="Choose New Date Taken" type="datetime-local" @bind="@allFiles[ii].dateTaken" @bind:event="oninput" @onchange="@UpdateStatus" step="1">} *@
@*                 if (infoChecked){<span class="infoSpan">@($"DT Source: {allFiles[i].dateTakenSrc}")</span>} *@
@*                 if (allFiles[i].alreadyInLib){<span class="errorSpan">Item already in library. Won't upload.</span>} *@
@*                  *@
@*                 <button class="iconBtn" title="Remove This Item From the Upload" @onclick="@(() => { allFiles.RemoveAt(ii); UpdateStatus(); })"><span class="material-icons">close</span></button> *@
@*                 <button class="iconBtn" title="DELETE This Item From the Upload" @onclick="@(() => { FileSystem.DeleteFile(allFiles[ii].fullPath, UIOption.OnlyErrorDialogs, RecycleOption.SendToRecycleBin); allFiles.RemoveAt(ii); UpdateStatus(); StateHasChanged(); })"><svg width="24px" height="24px" class="material-icons" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg></button> *@
@*             } *@
@*             </div> *@
@*         } *@
@*     </div> *@
@* } *@
@* *@
@* @code{ *@
@*     private static CollectionSelector collectionSelector = new(); *@
@*     private static string collectionSelectorVis; *@
@* *@
@*     private static List<Guid> allGuids; //Passed in to CollectionSelector and gets items added in AddItems(). *@
@*     private static List<string> allFullPaths; *@
@*     private static List<C.UploadFile> allFiles; *@
@* *@
@*     private static string status, popupMsg; *@
@*     private static int progressValue, progressMax; *@
@*     private static bool popupVisible; *@
@*     private static string statusDisplay, progressDisplay, promptVis, addItemsPromptVis; *@
@*     private static string message; *@
@*      *@
@*     //Filtering *@
@*     private static string filterVis; *@
@*     private static bool neitherChecked; *@
@*     private static bool warningChecked; *@
@*     private static bool errorChecked; *@
@*     private static bool infoChecked; *@
@*      *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         allGuids = new List<Guid>(); *@
@*         allFullPaths = F.GetSupportedFiles(S.uploadFolderPath); *@
@*         allFiles = new List<C.UploadFile>(allFullPaths.Count); *@
@*         status = ""; *@
@*         progressValue = progressMax = 0; *@
@*         statusDisplay = "inline"; *@
@*         progressDisplay = "none"; *@
@*         promptVis = addItemsPromptVis = filterVis = collectionSelectorVis = "hidden"; *@
@*         neitherChecked = warningChecked = errorChecked = false; *@
@*         popupVisible = infoChecked = true; *@
@*          *@
@*         await Parallel.ForEachAsync(allFullPaths, async (fullPath, _) =>  *@
@*         { *@
@*             C.UploadFile file = new() *@
@*             { *@
@*                 filename = Path.GetFileNameWithoutExtension(fullPath), *@
@*                 extension = Path.GetExtension(fullPath), *@
@*                 shortPath = Path.Join("pss_upload", fullPath.Replace(S.uploadFolderPath!, null)).Replace('\\', '/'), //Get the short path to this item relative to pss_upload. *@
@*                 fullPath = fullPath.Replace('\\', '/'), *@
@*                 thumbnail = await Task.Run(() => Path.GetExtension(fullPath).ToLower() is ".mp4" or ".mkv" or ".mov" ? F.GenerateThumbnail(fullPath) : null, _), *@
@*                 uuid = Guid.NewGuid() *@
@*             }; *@
@*             file.dateTaken = D.GetDateTakenAuto(fullPath, out file.dateTakenSrc); *@
@*             file.alreadyInLib = ItemInLibrary(file.dateTaken, Path.GetFileName(fullPath)); *@
@*             allFiles.Add(file); *@
@*             await InvokeAsync(StateHasChanged); *@
@*         }); *@
@*         allFiles = allFiles.OrderByDescending(o => o.dateTaken).ToList(); *@
@*         UpdateStatus(); *@
@*         popupMsg = "Loading Items in pss_upload..."; *@
@*         popupVisible = false; *@
@*     } *@
@* } *@
@* *@
@* @functions{ *@
@*     //Checks to see if there is a file on the server with the same name and date path. *@
@*     private static bool ItemInLibrary(DateTime? dateTaken, string filename) => File.Exists(C.CreateFullPath(dateTaken, filename)); *@
@* *@
@*     private static void UpdateStatus() => status = allFiles.Count == 0 ? "No files found to add" : $"{allFiles.Count(f => f.thumbnail == null)} pictures and {allFiles.Count(f => f.thumbnail != null)} videos pending upload. {allFiles.Count(f => f.dateTaken == null)} Warnings. {allFiles.Count(f => f.alreadyInLib)} Errors."; *@
@* *@
@*     //Permanently deletes every item in the upload folder that is marked with an error (already on server). *@
@*     private void DeleteErrors() *@
@*     { *@
@*         foreach (C.UploadFile file in allFiles.Where(file => file.alreadyInLib)) *@
@*         { *@
@*             allFiles.Remove(file); *@
@*             File.Delete(file.fullPath); *@
@*         } *@
@*         promptVis = "hidden"; *@
@*         StateHasChanged(); *@
@*     } *@
@* *@
@*     private async void AddItemsBtnClick() *@
@*     { *@
@*         if (S.showPrompts == false) *@
@*             await AddItems(); *@
@*         else *@
@*         { *@
@*             addItemsPromptVis = "visible"; *@
@*             StateHasChanged(); *@
@*         } *@
@*     } *@
@* *@
@*     //Adds all the items to photo library, and, if applicable, any album(s) or folder. *@
@*     private async Task AddItems() *@
@*     { *@
@*         int rowsAffected = 0; *@
@*         progressMax = allFiles.Count; *@
@*         popupVisible = true; *@
@*         popupMsg = $"Adding {progressMax} Items to Library..."; *@
@*         progressDisplay = "inline"; *@
@*         statusDisplay = "none"; *@
@*         StateHasChanged(); *@
@*          *@
@*         await Parallel.ForEachAsync(allFiles.ToList(), async (file, _) => *@
@*         { *@
@*             allFiles.RemoveAll(u => u.uuid == file.uuid); *@
@*             await InvokeAsync(StateHasChanged); *@
@* *@
@*             if (file.alreadyInLib) return; //Ignore duplicates *@
@* *@
@*             string newShortPath = C.CreateShortPath(file.dateTaken, file.filename + file.extension).Replace('\\', '/'); *@
@*             allGuids.Add(file.uuid); *@
@*             Directory.CreateDirectory(C.CreateFullDateFolderPath(file.dateTaken)); *@
@* *@
@*             try *@
@*             { *@
@*                 string fullFinalPath = C.CreateFullPath(file.dateTaken, file.filename + file.extension); *@
@*                 await Task.Run(() => File.Move(file.fullPath!, fullFinalPath), _); *@
@*                 rowsAffected += await C.InsertMedia(newShortPath, file.dateTaken, file.uuid, file.thumbnail); *@
@*                 await Task.Run(() => D.UpdateDateTaken(fullFinalPath, file.dateTaken), _); *@
@*                 progressValue++; *@
@*             } *@
@*             catch (IOException e) *@
@*             { *@
@*                 Console.WriteLine(e.Message); *@
@*             } *@
@*         }); *@
@*         collectionSelector.ConfirmBtnClick(); *@
@*         progressDisplay = "none"; *@
@*         statusDisplay = "inline"; *@
@*         popupVisible = false; *@
@*         collectionSelectorVis = "hidden"; *@
@*         status = $"Added {rowsAffected} items to library"; *@
@*         StateHasChanged(); *@
@*         allFiles.Clear(); *@
@*     } *@
@* } *@