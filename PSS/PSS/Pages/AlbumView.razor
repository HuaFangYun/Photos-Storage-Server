@page "/album-view/{albumID}"
@inject NavigationManager navigationManager

<title>@albumName - PSS</title>
<link href="css/AlbumView.css" rel="stylesheet">

@{
    isFolder = C.IsFolder(statAlbumID);
    string vis = selectedItemsCount > 0 ? "visible" : "hidden";
    
    <header>
        <button class="iconBtn" @onclick="@libContentViewer.ClearChecks" style="visibility: @vis" id="clearBtn"><span class="material-icons-outlined">close</span></button>
        <span style="visibility: @vis" id="selectedAmtText">@selectedItemsCount&nbsp;&nbsp;Selected</span>

        <div id="albumRenameDiv">
            <input type="text" placeholder="Enter new album name" @bind="NewAlbumName" @bind:event="oninput" autocomplete="off">
            
            <button class="iconBtn" @onclick="@CancelBtnClick" style="visibility: @buttonsVis">
                <span class="material-icons-outlined">close</span>
            </button>
    
            <button class="iconBtn" @onclick="@ConfirmBtnClick" style="visibility: @buttonsVis">
                <span class="material-icons-outlined">check</span>
            </button>
        </div>

        <div id="buttons">
            <button class="iconBtn"><a style="text-decoration: none; visibility: @vis" class="material-icons-outlined" @onclick="@libContentViewer.DownloadSelected" href="@S.TMP_REQUEST_PATH/@libContentViewer.ZipFilename" download="@libContentViewer.ZipFilename">file_download</a></button>
            <button class="iconBtn" style="visibility: @vis" @onclick="@(() => albumsVis = "visible")" title="Add Selected to Album"><span class="material-icons-outlined">library_add</span></button>
            <button class="iconBtn" style="visibility: @vis" title="Add or Remove Stars From Selected" @onclick="@(() => F.VisToggle(ref libContentViewer.starPromptVis))"><span class="material-icons-outlined">star_outline</span></button>
            <button class="iconBtn" style="visibility: @vis" @onclick="@RemoveBtnClick" title="Remove Selected"><span class="material-icons-outlined">remove</span></button>
            <button class="iconBtn" style="visibility: @vis" @onclick="@libContentViewer.DeleteBtnClick" title="Delete Selected"><svg width="24px" height="24px" class="material-icons" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg></button>
            <button class="iconBtn" @onclick="@(() => F.VisToggle(ref sortDivVis))" title="More Options"><span class="material-icons-outlined">more_vert</span></button>
        </div>

        <div id="moreOptionsDiv" style="visibility: @sortDivVis">
            <button @onclick="@(() => ChangeOrder(C.AVSortMode.OldestDateTaken))"><span class="material-icons-outlined" style="@(sortMode == C.AVSortMode.OldestDateTaken ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(sortMode == C.AVSortMode.OldestDateTaken ? "#1a73e8" : "white")">Oldest Date Taken First</span></button>
            <button @onclick="@(() => ChangeOrder(C.AVSortMode.NewestDateTaken))"><span class="material-icons-outlined" style="@(sortMode == C.AVSortMode.NewestDateTaken ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(sortMode == C.AVSortMode.NewestDateTaken ? "#1a73e8" : "white")">Newest Date Taken First</span></button>
            <button @onclick="@(() => ChangeOrder(C.AVSortMode.OldestAdded))"><span class="material-icons-outlined" style="@(sortMode == C.AVSortMode.OldestAdded ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(sortMode == C.AVSortMode.OldestAdded ? "#1a73e8" : "white")">Oldest Added First</span></button>
            <button @onclick="@(() => ChangeOrder(C.AVSortMode.NewestAdded))"><span class="material-icons-outlined" style="@(sortMode == C.AVSortMode.NewestAdded ? "color: #1a73e8" : "visibility: hidden")">check</span><span style="color: @(sortMode == C.AVSortMode.NewestAdded ? "#1a73e8" : "white")">Newest Added First</span></button>
            <button @onclick="@(() => C.ChangeAlbumType(statAlbumID, !isFolder))"><span class="material-icons-outlined">@(isFolder ? "perm_media" : "collections")</span><span>@(isFolder ? "Change to Album" : "Change to Folder")</span></button>
            <button @onclick="@DeleteAlbumBtnClick"><svg width="24px" height="24px" class="material-icons" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg><span>@(isFolder ? "Delete Folder" : "Delete Album")</span></button>
        </div>
    </header>
    
    string orderBy = sortMode switch
    {
        C.AVSortMode.OldestDateTaken => "date_taken ASC",
        C.AVSortMode.NewestDateTaken => "date_taken DESC",
        C.AVSortMode.OldestAdded => "date_added_to_album ASC",
        C.AVSortMode.NewestAdded => "date_added_to_album DESC",
        _ => "date_taken DESC"
    };
    
    string shared = $"SELECT m.path, m.date_taken, m.date_added, m.starred, m.uuid, m.thumbnail FROM media AS m INNER JOIN album_entries AS a ON m.uuid=a.uuid WHERE album_id={statAlbumID} AND date_deleted IS NULL AND separate={isFolder}";
    string topQuery = $"{shared} AND date_taken IS NOT NULL AND date_taken > @oldestOrNewestDT ORDER BY {orderBy} LIMIT 50";
    string bottomQuery = $"{shared} AND date_taken IS NOT NULL AND date_taken < @oldestOrNewestDT ORDER BY {orderBy} LIMIT 50";
    
    //Loads every item with NULL Date Taken first, then items with Date Taken.
    string firstQuery = "";
    if (S.displayNoDTInAV) firstQuery = $"({shared} AND date_taken IS NULL ORDER BY {orderBy}) UNION ";
    firstQuery += $"({shared} AND date_taken IS NOT NULL ORDER BY {orderBy} LIMIT 50) ORDER BY {orderBy}";
    <LibraryContentViewer @ref="@libContentViewer" @bind-HeaderVis="@headerVis" @bind-SelectedItemsCount="@selectedItemsCount" AlbumID="@statAlbumID"
        NoItemsText="@(isFolder ? "Folder is Empty" : "Album is Empty")" NotNullDTQueryTop="@topQuery" NotNullDTQueryBottom="@bottomQuery" FirstQuery="@firstQuery"/>
    
    <AlbumSelector SelectedItems="@libContentViewer.SelectedItems" @bind-HeaderVis="@headerVis" @bind-AlbumsVis="@albumsVis"/>
    <KeyboardShortcuts AltA="@(() => { F.VisToggle(ref albumsVis); StateHasChanged(); })" />
    
    <TwoChoiceInput @bind-TwoChoiceVis="@delPromptVis" Message=@($"PERMANENTLY Delete {(isFolder ? "Folder" : "Album")} \"{albumName}\"?")
        YesBtnClick="@(() => { navigationManager.NavigateTo("/albums"); C.DeleteAlbum(statAlbumID); })" NoBtnClick="@(() => { delPromptVis = "hidden"; /* StateHasChanged(); */ })"/>
}

@code{
    [Parameter]
    public string albumID { get; set; }
    private static int statAlbumID;
    private static bool isFolder;
    
    private static LibraryContentViewer libContentViewer = new();
    private static int selectedItemsCount;
    private static C.AVSortMode sortMode;
    private static List<C.MediaRow> albumMedia;
    private static string headerVis, albumsVis, delPromptVis, buttonsVis, sortDivVis;
    private static string albumName, _newAlbumName;
    
    private static string NewAlbumName
    {
        get => _newAlbumName;
        set
        {
            if (value == albumName) //Same so don't need to reapply
            {
                buttonsVis = "hidden";
            }
            else if (value != albumName)
            {
                _newAlbumName = value;
                buttonsVis = "visible";
            }
        }
    }
}

@functions{
    protected override void OnInitialized()
    {
        selectedItemsCount = 0;
        statAlbumID = Int32.Parse(albumID);
        sortMode = C.AVSortMode.NewestDateTaken; //Default
        albumName = C.GetAlbumName(statAlbumID);
        _newAlbumName = albumName;
        headerVis = albumsVis = delPromptVis = buttonsVis = sortDivVis = "hidden";
    }
    
    //Remove selected from the album
    private static async Task RemoveBtnClick()
    {
        foreach (Guid uuid in libContentViewer.SelectedItems) C.RemoveFromAlbum(uuid, statAlbumID);
        await libContentViewer.ClearChecks();
        albumMedia.Clear();
        libContentViewer.AddContentBottom();
    }
    
    private void DeleteAlbumBtnClick()
    {
        if (S.showPrompts == false)
        {
            DeleteAlbum();
            return;
        }

        delPromptVis = "visible";
    }
    
    private void DeleteAlbum()
    {
        navigationManager.NavigateTo("/albums");
        C.DeleteAlbum(statAlbumID);
    }
    
    //Functions for album stuff
    private static void CancelBtnClick()
    {
        buttonsVis = "hidden";
        _newAlbumName = albumName; //Reset to OG
    }

    private static void ConfirmBtnClick()
    {
        buttonsVis = "hidden";
        if (NewAlbumName != "")
            C.RenameAlbum(NewAlbumName, statAlbumID);
        else
            NewAlbumName = "Please enter a name";
    }
        
    private static void ChangeOrder(C.AVSortMode newMode)
    {
        sortMode = newMode;
        albumMedia = C.LoadAlbum(statAlbumID, sortMode);
    }
}
