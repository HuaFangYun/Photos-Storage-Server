@page "/gpo-import"

<title>GPO Import - PSS</title>
<link href="css/ImportGPOFolder.css" rel="stylesheet">

<header>
    <button class="textBtn" @onclick="@(() => F.VisToggle(ref filterVis))" title="This filter thing sucks I know but how it works is check neither, warning, or error (just 1 at a time) to show just those items">
        <span class="material-icons-outlined">filter_list</span><span>Filter Items</span>
    </button>
    
    <button class="textBtn" @onclick="AddItems">
        <span class="material-icons-outlined">add_photo_alternate</span><span>Add to Library</span>
    </button>
    
    <button class="textBtn" @onclick="@(() => F.VisToggle(ref albumSelectorVis))">
        <span class="material-icons-outlined">@(albumSelectorVis == "visible" ? "image_not_supported" : "image")</span><span>@(albumSelectorVis == "visible" ? "Hide Albums" : "Show Albums")</span>
    </button>

    <span id="statusSpan">@status</span>
</header>

<div id="filter" style="visibility: @filterVis">
    <label><input type="checkbox" @bind="@neitherChecked">Neither</label>
    <label style="color: yellow"><input type="checkbox" @bind="@warningChecked">Warning</label>
    <label style="color: red"><input type="checkbox" @bind="@errorChecked">Error</label>
    <label style="color: #00af00"><input type="checkbox" @bind="@infoChecked">Show Info</label>
</div>

<AlbumSelector @ref="@albumSelector" AlbumsVis="@albumSelectorVis" SelectedItems="@allShortPaths" ShowCheckCancelButtons="false"/>

<KeyboardShortcuts AltA="@(() => { F.VisToggle(ref albumSelectorVis); StateHasChanged(); })" />

@code{
    private static AlbumSelector albumSelector = new();
    private static string albumSelectorVis;

    private static List<string> allShortPaths; //Passed in to AlbumSelector and set in AddItems().
    private static List<string> allFullPaths;
    private static List<C.UploadFile> allFiles;

    private static string status;
    private static string promptVis;
    
    //Filtering
    private static string filterVis;
    private static bool neitherChecked;
    private static bool warningChecked;
    private static bool errorChecked;
    private static bool infoChecked;
    
    protected override void OnInitialized()
    {
        allShortPaths = new List<string>();
        allFullPaths = F.GetSupportedFiles(Upload.GpoFolderPath);
        allFiles = new List<C.UploadFile>(allFullPaths.Count);

        foreach (string fullPath in allFullPaths)
        {
            //Get the date taken based on this item's fullPath.
            string dtPath = fullPath.Replace(Upload.GpoFolderPath, "");
            dtPath = dtPath.Replace(Path.GetFileName(dtPath), "").Replace('\\', '/');
            if (dtPath[0] == '/') dtPath = dtPath.Remove(0, 1);
            
            D.DateTakenSrc timeSrc;
            DateTime? fullDT;
            if (dtPath.StartsWith("Unknown Date Taken"))
            {
                timeSrc = D.DateTakenSrc.None;
                fullDT = null;
            }
            else
            {
                string[] data = dtPath.Split('/'); //Split 2018/2 February/14 into 2018, 2 February, and 14
                int year = Int32.Parse(data[0]);
                int month = Int32.Parse(data[1].Substring(0, 2));
                int day = Int32.Parse(data[2]);

                //Now try and get time, if there is any.
                DateTime? time = D.GetDateTakenAuto(fullPath, out timeSrc);
                if (time == null)
                    fullDT = new DateTime(year, month, day);
                else
                    fullDT = new DateTime(year, month, day, time.Value.Hour, time.Value.Month, time.Value.Day);
            }
            
            allFiles.Add(new C.UploadFile
            {
                fullPath = fullPath.Replace('\\', '/'),
                shortPath = null, //Not used
                thumbnail = Path.GetExtension(fullPath).ToLower() is ".mp4" or ".mkv" or ".mov" ? F.GenerateThumbnail(fullPath) : null,
                dateTaken = fullDT,
                dateTakenSrc = timeSrc,
                alreadyInLib = ItemExists(Path.GetFileName(fullPath), fullDT)
            });
        }
    }
}

@functions{
    ///<summary>Creates the DB short path for an item given its Date Taken and its filename.</summary>
    ///<returns>The generated short path for the item.</returns>
    ///<remarks>If the Date Taken was something like 5/1/2022 3:45:03 PM, then its DB short path would be 2022/5 May/filename.ext. If it was null, it'd be Unknown/filename.ext.</remarks>
    private static string CreateShortPath(DateTime? dateTaken, string filename)
    {
        if (dateTaken == null) return $"Unknown/{filename}";
        return Path.Combine(dateTaken.Value.Year.ToString(), $"{dateTaken.Value.Month} {System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(dateTaken.Value.Month)}", filename);
    }
    
    ///Creates a full path to a shortPath folder.
    private static string GenerateSortedDir(DateTime? dateTaken)
    {
        if (dateTaken == null) return Path.Combine(S.libFolderPath, "Unknown");
        return Path.Combine(S.libFolderPath, CreateShortPath(dateTaken, ""));
    }
    
    //Checks to see if there is a file on the server with the same name and date path.
    private static bool ItemExists(string filename, DateTime? dateTaken)
    {
        if (dateTaken == null) return File.Exists(Path.Combine(S.libFolderPath, "Unknown", filename));
        return File.Exists(Path.Combine(S.libFolderPath, CreateShortPath(dateTaken, filename)));
    }
    
    private static void UpdateStatus() => status = allFiles.Count == 0 ? "No files found to add" : $"{allFiles.Select(f => f.thumbnail != null).Count()} pictures and {0} videos pending upload. {allFiles.Count(c => !c.dataPresent)} Warnings. {allFiles.Count(c => c.alreadyInLib)} Errors.";

    //Clears an item from the Lists
    private static void DeleteBtnClick(int index)
    {
        allFiles.RemoveAt(index);
        UpdateStatus();
    }

    //Adds all the items to photo library, and, if applicable, any albums.
    private void AddItems()
    {
        int rowsAffected = 0;
        
        foreach (C.UploadFile file in allFiles)
        {
            if (file.alreadyInLib) continue; //Ignore duplicates

            string filename = Path.GetFileName(file.fullPath);
            string newDir = GenerateSortedDir(file.dateTaken);
            string newPath = Path.Combine(newDir, filename!); //Used for moving to new home on server.
            
            string newShortPath = Path.Combine(GenerateDatePath(file.dateTaken), filename).Replace('\\', '/'); //Don't need full path, just the short path (/2021/10 October/filename.png).
            allShortPaths.Add(newShortPath);
            Directory.CreateDirectory(newDir);

            GC.Collect(); //Dumb but it prevents file in use error for File.Move. https://stackoverflow.com/a/21137207
            GC.WaitForPendingFinalizers();
            try
            {
                File.Move(file.fullPath!, newPath);
                rowsAffected += C.InsertMedia(newShortPath, file.dateTaken, file.thumbnail);
            }
            catch (IOException e)
            {
                Console.WriteLine(e.Message);
            }
        }
        
        albumSelector.ConfirmBtnClick();
        status = $"Added {rowsAffected} items to library";
        allFiles.Clear();
        albumSelectorVis = "hidden";
    }

    private static void DeleteErrorsBtnClick()
    {
        promptVis = "visible";
        int count = allFiles.Count(c => c.alreadyInLib); //Get number of items with errors.
        message = $"Are you sure you want to DELETE all {count} items with errors from pss_upload?";
    }

    //Permanently deletes every item in the upload folder that is marked with an error (already on server).
    private void DeleteErrors()
    {
        foreach (Connection.UploadFile file in allFiles.ToList().Where(file => file.alreadyInLib))
        {
            allFiles.Remove(file);
            File.Delete(file.fullPath);
        }
        promptVis = "hidden";
        StateHasChanged();
    }
}
