@page "/import"

<title>Import - PSS</title>
<link href="css/Import.css" rel="stylesheet">

@{
	if (allAbsPaths is null || allAbsPaths.Count is 0)
	{
		<h1>No supported files found in pss_upload.</h1>
		return;
	}

	importFiles = importFiles.OrderBy(file => file.originalFilename).ToList();
	for (int i = 0; i < importFiles.Count; i++)
	{
		if (i + 1 < importFiles.Count && importFiles[i].originalFilename == importFiles[i + 1].originalFilename)
		{
			importHasItemsWithSameName = true;
			
			<div class="errorDiv">
				@do
				{
					<span>@importFiles[i].shortPath</span><br/>
					i++;
				} while (i < importFiles.Count && importFiles[i - 1].originalFilename == importFiles[i].originalFilename);
			</div>
		}
		else
		{
			<span style="color: green">@importFiles[i].shortPath</span><br/>
		}
	}
	
	if (importHasItemsWithSameName)
		return;
	
	<span>shouldn't see me</span>
}

@code {

	///Stores the absolute path of every supported file in pss_import.
	private static List<string> allAbsPaths;

	///List of data about each supported file in pss_import.
	private static List<ImportFile> importFiles;

	///If pss_import contains files with the same name but in different folders, make sure the user fixes this first as it will most likely cause problems when the items get added to pss_library.
	private static bool importHasItemsWithSameName = false;

	protected override async Task OnInitializedAsync()
	{
		allAbsPaths = F.GetSupportedFiles(S.importFolderPath);
		importFiles = new List<ImportFile>(allAbsPaths.Count);

		await Parallel.ForEachAsync(allAbsPaths, async (absPath, _) =>
		{
			ImportFile importFile = new(absPath);
			importFiles.Add(importFile);
		});

		
	}

}