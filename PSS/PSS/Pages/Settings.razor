@page "/settings"

<title>Settings - PSS</title>
<link href="css/Settings.css" rel="stylesheet"/>

<div id="body">
    <div>
        <span class="header">Settings</span>
        <div class="settings-pair">
            <span>Server IP Address</span>
            <input type="text" class="settings-pair" @bind="@serverIP"/>
        </div>

        <div class="settings-pair">
            <span>Where to upload items for applying</span>
            <input type="text" class="settings-pair" @bind="@uploadFolderPath"/>
        </div>

        <div class="settings-pair">
            <span>Root path to library folder</span>
            <input type="text" class="settings-pair" @bind="@libraryRootPath"/>
        </div>

        <div class="settings-pair">
            <span>Where to backup library and database</span>
            <input type="text" class="settings-pair" @bind="@backupFolderPath"/>
        </div>
        
        <div class="settings-pair">
            <span>Where to store temporary items</span>
            <input type="text" class="settings-pair" @bind="@tmpFolderPath"/>
        </div>
        
        <div class="settings-pair">
            <span style="display: inline">Show Prompts?</span>
            <input type="checkbox" class="settings-pair" @bind="@showPrompts"/>
        </div>

        <button class="textBtn" @onclick="@ApplyBtnClicked"><span class="material-icons-outlined">check</span><span>Apply</span></button>
        <button class="textBtn" @onclick="@CancelBtnClicked"><span class="material-icons-outlined">close</span><span>Cancel</span></button>
        <button class="textBtn" @onclick="@ResetBtnClicked"><span class="material-icons-outlined">restart_alt</span><span>Reset</span></button>
    </div>
    
    <div id="shortcuts">
        <span class="header" onclick="document.getElementById('allShortcuts').style.display = 'inline'">Keyboard Shortcuts</span>
        <div id="allShortcuts" style="display: none">
            <span>Index/Starred/Album View</span>
            <div><code>Ctrl D</code><span>Delete Selected</span></div>
            <div><code>Alt A</code><span>Show Album Selector</span></div>
            <div><code>Alt S</code><span>Show Star Menu in Index and AV</span></div>
            <div><span>Any pages like these ones all support Ctrl and Shift. Ctrl is an alternative to the small check button and Shift is for selecting multiple items.</span></div>

            <span>View Item</span>
            <div><code>Ctrl D</code><span>Delete Item</span></div>
            <div><code>Ctrl E</code><span>Edit Date Taken</span></div>
            <div><code>Alt A</code><span>Show Album Selector</span></div>
            <div><code>Alt Left</code><span>Go Back</span></div>
            <div><code>Alt S</code><span>Add/Remove Star</span></div>
        </div>
    </div>

    <div>
        <span class="header">Maintenance</span>
        <button class="textBtn" title="Last backed up on @lastBackedUp" @onclick="@M.BackupServer"><span class="material-icons-outlined">backup</span><span>Backup Server</span></button>
        <button class="textBtn" @onclick="@M.RestoreBackup"><span class="material-icons-outlined">restore</span><span>Restore Backup</span></button>
        <button class="textBtn" @onclick="@(() => { Directory.Delete(S.tmpFolderPath, true); Directory.CreateDirectory(S.tmpFolderPath); })"><span class="material-icons-outlined">folder_delete</span><span>Clear pss_tmp</span></button>
        <button title="Clear pss_tmp and Empty Trash" class="textBtn" @onclick="@FreeUpSpace"><span class="material-icons-outlined">folder_delete</span><span>Free Up Space</span></button>
        @if (!maintenanceLoaded)
        {<button class="textBtn" @onclick="@RunMaintenanceCheck"><span class="material-icons-outlined">build</span><span>Run Maintenance Check</span></button>}
        @if (maintenanceLoaded)
        {
            <button class="textBtn" title="Items in Library Folder but NOT in Database"><span class="material-icons-outlined">insert_drive_file</span><a href="maintenance/untracked-files">Untracked Files (@untrackedPaths.Count)</a></button>
            <button class="textBtn" title="Paths in Database but File Is Not Present in Library"><span class="material-icons-outlined">find_in_page</span><a href="maintenance/missing-files">Missing Files (@media_missing.Count)</a></button>
            <button class="textBtn" @onclick="@EmptyFoldersBtnClick" title="Click to Delete All Empty Folders From Library and Upload"><span class="material-icons-outlined">folder</span><span>Empty Folders (@emptyFolders.Count)</span></button>
        }
    </div>
    
    <div id="statsDiv">
        <span class="header">Stats</span>
        @if (!statsLoaded) {<button class="textBtn" @onclick="@GetStats" title="Click to Load Stats for Library"><span class="material-icons-outlined">insights</span><span>Load Stats</span></button>}
        @if (statsLoaded)
        {
            <span>@mediaRowCount Items in Library</span>
            <span>@albumsCount Albums</span>
            <span style="margin-top: 14px;">Library Drive Total Size (Usable): @F.FormatBytes(totalUsableDriveSize)</span>
            <span>Library Drive Free Space: @F.FormatBytes(freeDriveSpace)</span>
            <progress style="margin-bottom: 14px" max="100" value="@((float)freeDriveSpace / totalUsableDriveSize * 100)"></progress>
            <span>Library Size: @F.FormatBytes(librarySize)</span>
            if (oldestItem.uuid != Guid.Empty)
            {
                <span><a target="_blank" rel="noopener noreferrer" href="@($"/view/{oldestItem.uuid}")">Oldest Item in Library, Taken on @oldestItem.dateTaken</a></span> <!-- https://stackoverflow.com/questions/50709625/link-with-target-blank-and-rel-noopener-noreferrer-still-vulnerable -->
            }
            if (newestItem.uuid != Guid.Empty)
            {
                <span><a target="_blank" rel="noopener noreferrer" href="@($"/view/{newestItem.uuid}")">Newest Item in Library, Taken on @newestItem.dateTaken</a></span>
            }
            <span>Server went online at @whenWentOnline</span>
            <span>Server has been online for @(DateTime.Now - whenWentOnline)</span>
        }
    </div>

    <div id="debugDiv">
        <span class="header">Debug</span>
        <div>
            <input type="text" placeholder="Enter a query" @bind="@debugQuery"/>
            <button class="textBtn" style="margin-left: 10px" @onclick="@RunQuery"><span class="material-icons-outlined">play_arrow</span><span>Run Query</span></button>
        </div>
    </div>
</div>

@code {
    //Settings
    private static string serverIP = S.serverIP;
    private static string uploadFolderPath = S.uploadFolderPath;
    private static string libraryRootPath = S.libFolderPath;
    private static bool showPrompts = S.showPrompts;
    private static string backupFolderPath = S.backupFolderPath;
    private static string tmpFolderPath = S.tmpFolderPath;
    
    //Maintenance
    private static bool maintenanceLoaded;
    private static string lastBackedUp;
    private static List<string> untrackedPaths;

    //Get all folders in Library and Upload
    private static string[] folderPaths;
    private static readonly List<string> emptyFolders = new();
    
    //Missing Files stuff
    private static List<string> media_missing = new();
    private static List<string> media_trash_missing = new();
    private static List<string> album_entries_missing = new();
    private static List<string> album_entries_trash_missing = new();
    
    //Stats
    private static bool statsLoaded;
    private static long mediaRowCount;
    private static long albumsCount;
    private static long totalUsableDriveSize; //How much space the drive pss_library is on could have. E.g., on a 1 TB drive it returns ~930 GB. The rest is probably reserved for the OS.
    private static long freeDriveSpace; //Bytes
    private static long librarySize; //Bytes
    private static C.MediaRow oldestItem, newestItem;
    public static DateTime whenWentOnline; //When did the server go online?
    
    //Debug
    private static string debugQuery;

    protected override void OnInitialized()
    {
        maintenanceLoaded = false;
        string datePath = Path.Combine(S.backupFolderPath, "Backed up on.txt");
        lastBackedUp = File.Exists(datePath) ? DateTime.Parse(File.ReadAllText(datePath)).ToString("MMM d, yyyy h:mm:ss tt") : "Never";
        
        //Items in lib folder but not DB.
        untrackedPaths = new List<string>();
        
        //Items in database but no file on server
        media_missing = new List<string>();
        media_trash_missing = new List<string>();
        album_entries_missing = new List<string>();
        album_entries_trash_missing = new List<string>();

        //Empty folders
        folderPaths = Directory.GetDirectories(S.libFolderPath, "*", SearchOption.AllDirectories).Concat(Directory.GetDirectories(S.uploadFolderPath, "*", SearchOption.AllDirectories)).ToArray();
        foreach (string path in folderPaths)
            if (M.IsFolderEmpty(path) && !emptyFolders.Contains(path)) emptyFolders.Add(path);
        
        //Stats
        statsLoaded = false;
        mediaRowCount = 0;
        albumsCount = 0;
        totalUsableDriveSize = 0;
        freeDriveSpace = 0;
        librarySize = 0;

        oldestItem = new C.MediaRow("", DateTime.Now, DateTime.Now, false, Guid.Empty);
        newestItem = new C.MediaRow("", DateTime.Now, DateTime.Now, false, Guid.Empty);
    }

    private static void FreeUpSpace()
    {
        //Clear pss_tmp.
        Directory.Delete(S.tmpFolderPath, true);
        Directory.CreateDirectory(S.tmpFolderPath);
        
        //Empty trash.
        //foreach (C.MediaRow item in C.LoadMediaTrashTable()) C.PermDeleteItem(item.path); TODO
    }

    private static void ApplyBtnClicked()
    {
        S.serverIP = serverIP;
        S.uploadFolderPath = uploadFolderPath;
        S.libFolderPath = libraryRootPath;
        S.showPrompts = showPrompts;
        S.backupFolderPath = backupFolderPath;
        S.tmpFolderPath = tmpFolderPath;
        S.WriteSettings();
    }

    private static void CancelBtnClicked()
    {
        serverIP = S.serverIP;
        uploadFolderPath = S.uploadFolderPath;
        libraryRootPath = S.libFolderPath;
        showPrompts = S.showPrompts;
        backupFolderPath = S.backupFolderPath;
        tmpFolderPath = S.tmpFolderPath;
    }

    private static void ResetBtnClicked()
    {
        S.ResetSettings();
        CancelBtnClicked();
    }

    //Delete all empty folders
    private static void EmptyFoldersBtnClick()
    {
        emptyFolders.Reverse(); //Start at deepest folder and work up (to avoid dir not found errors).
        foreach (string path in emptyFolders) Directory.Delete(path);
        emptyFolders.Clear();
    }

    private static void RunMaintenanceCheck()
    {
        maintenanceLoaded = true;
        untrackedPaths = M.GetUntrackedLibFiles();

        media_missing = M.GetMissingFiles(M.MissingFilesTable.media);
        media_trash_missing = M.GetMissingFiles(M.MissingFilesTable.media_trash);
        album_entries_missing = M.GetMissingFiles(M.MissingFilesTable.album_entries);
        album_entries_trash_missing = M.GetMissingFiles(M.MissingFilesTable.album_entries_trash);
        media_missing = media_missing.Concat(media_trash_missing).Concat(album_entries_missing).Concat(album_entries_trash_missing).ToList();

        folderPaths = Directory.GetDirectories(S.libFolderPath, "*", SearchOption.AllDirectories).Concat(Directory.GetDirectories(S.uploadFolderPath, "*", SearchOption.AllDirectories)).ToArray();
        foreach (string path in folderPaths)
            if (M.IsFolderEmpty(path) && !emptyFolders.Contains(path)) emptyFolders.Add(path);
    }

    private static void GetStats()
    {
        statsLoaded = true;
        mediaRowCount = Stats.CountMediaRows();
        albumsCount = Stats.CountAlbums();
        
        DriveInfo driveInfo = new(S.libFolderPath);
        totalUsableDriveSize = driveInfo.TotalSize;
        freeDriveSpace = driveInfo.TotalFreeSpace;
        
        DirectoryInfo dirInfo = new(S.libFolderPath);
        librarySize = dirInfo.EnumerateFiles("*", SearchOption.AllDirectories).Sum(file => file.Length);

        oldestItem = Stats.FindOldestItem();
        newestItem = Stats.FindNewestItem();
    }

    private static void RunQuery()
    {
        try
        {
            C.Open();
            NpgsqlCommand cmd = new(debugQuery, C.connection);
            cmd.ExecuteNonQuery();
        }
        catch (NpgsqlException e)
        {
            Console.WriteLine("Error in RunQuery. " + e.Message);
        }
        finally
        {
            C.Close();
        }
    }
}