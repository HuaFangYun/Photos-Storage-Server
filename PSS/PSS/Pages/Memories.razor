@page "/memories"

<link rel="stylesheet" href="css/Memories.css">
<title>Memories - PSS</title>

<header>
    <span>Memories From</span>

    <select name="months" id="months" autocomplete="on" @bind="@SelectedMonth">
        @foreach (string month in months)
        {
            <option value="@month">@month</option>
        }
    </select>

    <input title="" type="number" @bind="@SelectedDay" @bind:event="oninput"/>
</header>

@{
    if (MediaList.Count == 0)
    {
        <h1>No items were taken on this day</h1>
        return;
    }
    
    <div id="mainDiv">
        @for (int i = 0; i < MediaList.Count; i++)
        {
            if (MediaList[i].dateTaken?.Year != previousYear)
            {
                previousYear = MediaList[i].dateTaken!.Value.Year;
                <span>@MediaList[i].dateTaken?.Year</span>
                <div>
                @{
                    do
                    {
                        <div class="thumbnail">
                            @if (MediaList[i].starred) { <span class="material-icons-outlined star-icon">star</span> }
                            @if (MediaList[i].video) { <span class="material-icons-outlined video-icon">play_circle_outline</span> }
                            <img src="data:image/jpg;base64,@MediaList[i].thumbnail" alt="@S.LIB_REQUEST_PATH/@MediaList[i].path" loading="lazy"/>
                        </div>
                        i++;
                    } while (i < MediaList.Count && MediaList[i].dateTaken?.Year == previousYear);
                    i--;
                }
                </div>
            }
        }
    </div>
}

@code{
    private int maxDay, _selectedDay, previousYear;
    private string _selectedMonth;

    private string SelectedMonth
    {
        get => _selectedMonth;
        set
        {
            _selectedMonth = value;

            maxDay = value switch
            {
                "April" or "June" or "September" or "November" => 30,
                "February" => 29,
                _ => 31
            };

            //If switching from a month with more days than the new month, don't create invalid input like Feb 30, etc.
            if (_selectedDay > maxDay) _selectedDay = maxDay;
            
            LoadMemories();
        }
    }

    private int SelectedDay
    {
        get => _selectedDay;
        set
        {
            if (value > maxDay)
            {
                _selectedDay = 1;
                int newIndex = months.IndexOf(SelectedMonth);
                if (newIndex > 12) newIndex = 0;
                else newIndex++;
                SelectedMonth = months[newIndex];
            }
            else if (value < 1)
            {
                int newIndex = months.IndexOf(SelectedMonth);
                if (newIndex < 0) newIndex = 11;
                else newIndex--;
                SelectedMonth = months[newIndex];
                _selectedDay = maxDay;
            }
            else _selectedDay = value;
            
            LoadMemories();
        }
    }

    private List<MediaRow> MediaList;

    private static readonly List<string> months = new(new[] {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"});

    protected override void OnInitialized()
    {
        SelectedMonth = DateTime.Today.ToString("MMMM");
        SelectedDay = DateTime.Today.Day;
        LoadMemories();
    }

    private void LoadMemories()
    {
        MediaList = C.LoadMemories(SelectedMonth, SelectedDay).OrderByDescending(m => m.dateTaken).ToList();
        previousYear = 0;
    }

}