@page "/maintenance/backups"
@using System.Diagnostics
@using System.IO.Compression

<title>Missing Files â€” Maintenance - PSS</title>
<link href="css/maintenance/Backups.css" rel="stylesheet">

@{
    <header>
        <button class="textBtn" @onclick="@CreateBackup"><span class="material-icons-outlined">restore</span><span>Create Backup</span></button>
        <button class="textBtn" @onclick="@(() => { Directory.Delete(S.backupFolderPath, true); Directory.CreateDirectory(S.backupFolderPath); backups.Clear(); })"><svg width="24px" height="24px" class="material-icons" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg><span>Delete All Backups</span></button>
        <span>@($"{backups.Count} {(backups.Count == 1 ? "Backup" : "Backups")}")</span>
    </header>

    if (backups.Count == 0)
    {
        <h1>No PSS Backups</h1>
        return;
    }

    <div id="mainDiv">
        @foreach ((string, DateTime, long) backup in backups)
        {
            <div class="backup">
                <span>@backup.Item2</span>
                <span>@F.FormatBytes(backup.Item3)</span>
                <button class="iconBtn" @onclick="@(() => RestoreBackup(backup.Item1))" title="Restore This Backup File"><span class="material-icons">restore</span></button>
                <button class="iconBtn" @onclick="@(() => File.Delete(backup.Item1))" title="Delete This Backup File"><svg width="24px" height="24px" class="material-icons" viewBox="0 0 24 24"><path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path></svg></button>
            </div>
        }
    </div>
    
    <ProgressPopUp @ref="progressPopUp" Message="Lorem ipsum dolor sit amet, consectetur ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum" FontSize="22" Visible="true" ShowProgressBar="true" ProgressBarMax="100" ProgressBarValue="30"/>
}

@code{

    ProgressPopUp progressPopUp;

    ///Stores each backup's full path, date and time it was made, and its size in bytes.
    private static List<(string, DateTime, long)> backups;

    protected override void OnInitialized()
    {
        backups = new List<(string, DateTime, long)>();

        foreach (string zipFile in Directory.GetFiles(S.backupFolderPath, "*.zip", SearchOption.AllDirectories))
        {
            try
            {
                backups.Add(new ValueTuple<string, DateTime, long>
                {
                    Item1 = zipFile,
                    Item2 = DateTime.Parse(Path.GetFileName(zipFile).Replace("PSS Backup", null).Replace(".zip", null).Replace(';', ':')),
                    Item3 = new FileInfo(zipFile).Length
                });
            }
            catch (FormatException){}
            }

        backups = backups.OrderByDescending(x => x.Item2).ToList(); //Sort it so newer backups appear first in the List.
    }
}

@functions{

    ///Create a backup .zip file of library and database on server, and add the backup to the top of the page of  backups.
    private static void CreateBackup()
    {
        string dbBakPath = Path.Combine(S.libFolderPath, "PSS Backup.bak");
        string zipFilePath = Path.Combine(S.backupFolderPath, $"PSS Backup {DateTime.Now:MM-dd-yyyy hh;mm;ss tt}.zip");
        
        //Backup entire database into a single file.
        using Process process = new Process
        {
            StartInfo = new ProcessStartInfo
            {
                WindowStyle = ProcessWindowStyle.Hidden,
                RedirectStandardError = false,
                RedirectStandardInput = false,
                RedirectStandardOutput = false,
                WorkingDirectory = "C:/Program Files/PostgreSQL/14/bin/",
                FileName = "cmd.exe",
                Arguments = $"/C pg_dump.exe \"host={S.serverIP} port=5432 dbname=PSS user=postgres password=Ph0t0s_Server\" > \"{dbBakPath}\"" //https://www.postgresqltutorial.com/postgresql-backup-database/   How to run this cmd without a password prompt: https://stackoverflow.com/a/62417775
            }
        };
        process.Start(); //How to run this cmd without a password prompt: https://stackoverflow.com/a/62417775
        process.WaitForExit();
        
        ZipFile.CreateFromDirectory(S.libFolderPath, zipFilePath, CompressionLevel.SmallestSize, false);
        File.Delete(dbBakPath);
        
        backups.Insert(0, new ValueTuple<string, DateTime, long>
        {
            Item1 = zipFilePath,
            Item2 = DateTime.Parse(Path.GetFileName(zipFilePath).Replace("PSS Backup", null).Replace(".zip", null).Replace(';', ':')),
            Item3 = new FileInfo(zipFilePath).Length
        });
    }

    ///<summary>Restore PSS to this backup.</summary>
    ///<param name="zipFullPath">The full path to the zip file to restore PSS to.</param>
    private static void RestoreBackup(string zipFullPath)
    {
        //Clears the database.
        C.Open();
        using NpgsqlCommand cmd = new NpgsqlCommand("DROP TABLE IF EXISTS media CASCADE; DROP TABLE IF EXISTS albums CASCADE; DROP TABLE IF EXISTS album_entries CASCADE;", C.connection);
        cmd.ExecuteNonQuery();
        C.Close();
        
        //Restore pss_library.
        if (Directory.Exists(S.libFolderPath)) Directory.Delete(S.libFolderPath, true);
        ZipFile.ExtractToDirectory(zipFullPath, S.libFolderPath);
        
        //Restore the database from the .bak file.
        Process process = new();
        ProcessStartInfo startInfo = new()
        {
            WindowStyle = ProcessWindowStyle.Hidden,
            WorkingDirectory = S.backupFolderPath,
            FileName = "cmd.exe",
            Arguments = $"/C type \"{Path.Combine(S.libFolderPath, "PSS Backup.bak")}\" | \"C:/Program Files/PostgreSQL/14/bin/psql.exe\" \"host=localhost port=5432 dbname=PSS user=postgres password=Ph0t0s_Server\""
        };
        process.StartInfo = startInfo;
        process.Start();
        process.WaitForExit();
        File.Delete($"{S.libFolderPath}/PSS Backup.bak");
    }
}