@page "/maintenance/backups"
@using System.Diagnostics
@using System.IO.Compression

<title>Missing Files â€” Maintenance - PSS</title>
<link href="css/maintenance/Backups.css" rel="stylesheet">

@{
    <header>
        <button class="textBtn" @onclick="@CreateBackup"><span class="material-icons-outlined">settings_backup_restore</span><span>Create Backup</span></button>
        <span>@($"{backups.Count} {(backups.Count == 1 ? "Backup" : "Backups")}")</span>
    </header>

    if (backups.Count == 0)
    {
        <h1>No PSS Backups</h1>
        return;
    }

    <div id="mainDiv">
        @foreach ((string, DateTime, long) backup in backups)
        {
            <div class="backup">
                <span>@backup.Item2</span>
                <span>@F.FormatBytes(backup.Item3)</span>
            </div>
        }
    </div>
}

@code{

    ///Stores each backup's full path, date and time it was made, and its size in bytes.
    private static List<(string, DateTime, long)> backups;

    protected override void OnInitialized()
    {
        backups = new List<(string, DateTime, long)>();
        
        foreach (string zipFile in Directory.GetFiles(S.backupFolderPath, "*.zip", SearchOption.AllDirectories))
        {
            try
            {
                backups.Add(new ValueTuple<string, DateTime, long>
                {
                    Item1 = zipFile.Replace('\\', '/'),
                    Item2 = DateTime.Parse(Path.GetFileName(zipFile).Replace("PSS DB Backup", null).Replace(".zip", null).Replace(';', ':')),
                    Item3 = new FileInfo(zipFile).Length
                });
            }
            catch (FormatException){}
        }
        
        backups = backups.OrderByDescending(x => x.Item2).ToList(); //Sort it so newer backups appear first in the List.
    }

    //TODO: backups are compressed t0 max level in zip files and each zip holds the whole library contents and the DB contents.
    //TODO: while this is running have some big popup or something else that prevents user from navigating away from the page. Also have a status text for what it is working on rn, like creating zip, backing up DB, etc.
    //TODO: display the size of each backup and each item would have its own restore/delete button. Button to delete all backups.

    //TODO
    //https://superuser.com/a/434876
    // Pages.Maintenance.Backups.databaseRestoreCommand = $"type \"{backupFolderPath}/PSS DB Backup.bak\" | \"C:/Program Files/PostgreSQL/14/bin/psql.exe\" \"host=localhost port=5432 dbname=PSS user=postgres password=Ph0t0s_Server\"";
}

@functions{

    ///Create a backup .zip file of library and database on server.
    private static void CreateBackup()
    {
        string timestamp = $"{DateTime.Now:MM-dd-yyyy hh;mm;ss tt}";
        string dbBakPath = Path.Combine(S.libFolderPath, $"PSS Backup {timestamp}.bak");
        string zipFilePath = Path.Combine(S.backupFolderPath, $"PSS DB Backup {timestamp}.zip");
        
        //Backup entire database into a single file.
        using Process process = new Process
        {
            StartInfo = new ProcessStartInfo
            {
                WindowStyle = ProcessWindowStyle.Hidden,
                RedirectStandardError = false,
                RedirectStandardInput = false,
                RedirectStandardOutput = false,
                WorkingDirectory = "C:/Program Files/PostgreSQL/14/bin/",
                FileName = "cmd.exe",
                Arguments = $"/C pg_dump.exe \"host={S.serverIP} port=5432 dbname=PSS user=postgres password=Ph0t0s_Server\" > \"{dbBakPath}\"" //https://www.postgresqltutorial.com/postgresql-backup-database/   How to run this cmd without a password prompt: https://stackoverflow.com/a/62417775
            }
        };
        process.Start(); //How to run this cmd without a password prompt: https://stackoverflow.com/a/62417775
        process.WaitForExit();
        
        ZipFile.CreateFromDirectory(S.libFolderPath, zipFilePath, CompressionLevel.SmallestSize, true);
        File.Delete(dbBakPath);
    }

    ///<summary>Restore PSS to this backup.</summary>
    ///<param name="zipFullPath">The full path to the zip file to restore PSS to.</param>
    private static void RestoreBackup(string zipFullPath)
    {
        //TODO: Use Tasks/Threads for this, and have a popup so user can't navigate away from page. Make sure to make it clear the entire library will be restored to this point.
        //TODO: Clear DB and pss_library, unzip this into pss_tmp, start copying stuff to pss_library and adding stuff to database.
    }
    
    // public static void BackupServer()
    // {
    //     //Clear backup folder to remove old backup: https://stackoverflow.com/a/12297082
    //     DirectoryInfo di = new(S.backupFolderPath);
    //     di.Delete(true);
    //     Directory.CreateDirectory(S.backupFolderPath); 
    //         
    //     FileSystem.CopyDirectory(S.libFolderPath, Path.Combine(S.backupFolderPath, "PSS Media Backup"));
    //     File.WriteAllText(Path.Combine(S.backupFolderPath, "Backed up on.txt"), DateTime.Now.ToString("M-d-yyyy h:mm:ss tt"));
    //         
    //     Process process = new(); //Backup entire database to a file
    //     ProcessStartInfo startInfo = new()
    //     {
    //         WindowStyle = ProcessWindowStyle.Hidden,
    //         WorkingDirectory = "C:/Program Files/PostgreSQL/14/bin/",
    //         FileName = "cmd.exe",
    //         Arguments = $"/C {S.databaseBackupCommand}"
    //     };
    //     process.StartInfo = startInfo;
    //     process.Start(); //How to run this cmd without a password prompt: https://stackoverflow.com/a/62417775
    //     process.WaitForExit();
    // }
    //
    // public static void RestoreBackup()
    // {
    //     //Kept getting a stupid error like OP did when trying to do it the normal way but luckily SO comes in to save the day: https://serverfault.com/a/260610
    //     FileSystem.CopyDirectory(Path.Combine(S.backupFolderPath, "PSS Media Backup"), S.libFolderPath);
    //
    //     Process process = new(); //Backup entire database to a file
    //     ProcessStartInfo startInfo = new()
    //     {
    //         WindowStyle = ProcessWindowStyle.Hidden,
    //         WorkingDirectory = S.backupFolderPath,
    //         FileName = "cmd.exe",
    //         Arguments = $"/C {S.databaseRestoreCommand}"
    //     };
    //     process.StartInfo = startInfo;
    //     process.Start();
    //     process.WaitForExit();
    // }
}