@using PSS.Pages
@inject IJSRuntime JSRuntime

<link href="css/components/ListItem.css" rel="stylesheet">

<div class="listItem">
	<span class="material-icons-outlined checkbox @(Import.selectedItems.Contains(ImportFile.uuid) ? "checked" : "unchecked")" @onclick="@CheckClicked">check_circle</span>
	<img src=@(ImportFile.thumbnail == null ? $"pss_import/{ImportFile.shortPath}" : $"data:image/jpg;base64,{ImportFile.thumbnail}") onclick="window.open('pss_import/@ImportFile.shortPath', '_blank').focus();" alt="" loading="lazy"/>
	<span class="shortPath" ondblclick="openEdit(@Index)">@ImportFile.shortPath</span>
	<input type="text" @bind="@ImportFile.renamedFilename" style="display: none" id="text @Index">
	<button class="iconBtn" id="save @Index" @onclick="@FilenameChanged" style="display: none"><span class="material-icons-outlined">save</span></button>
	<button class="iconBtn" id="close @Index" onclick="closeEdit(@Index)" style="display: none"><span class="material-icons-outlined">close</span></button>
</div>

@code {

	[Parameter, EditorRequired] public ImportFile ImportFile { get; set; }
	
	[Parameter, EditorRequired] public int Index { get; set; }
	
	[Parameter, EditorRequired] public Action OnCheckClick { get; set; }
}

@functions {

	private void FilenameChanged()
	{
		const string EMPTY_ERROR_MSG = "Name cannot be empty or whitespace.";
		const string DUPE_ERROR_MSG = "File with same name in folder.";
		if (String.IsNullOrWhiteSpace(ImportFile.renamedFilename))
		{
			ImportFile.renamedFilename = EMPTY_ERROR_MSG;
			return;
		}
		if (ImportFile.originalFilename == ImportFile.renamedFilename || ImportFile.renamedFilename is EMPTY_ERROR_MSG or DUPE_ERROR_MSG)
		{
			JSRuntime.InvokeAsync<int>("closeEdit", Index);
			ImportFile.renamedFilename = ImportFile.originalFilename;
			return;
		}
		
		string newShortPath = ImportFile.shortPath.Replace(ImportFile.originalFilename, ImportFile.renamedFilename);
		string newAbsPath = Path.Join(S.importFolderPath, newShortPath);
		
		if (File.Exists(newAbsPath))
		{
			ImportFile.renamedFilename = DUPE_ERROR_MSG;
		}
		else
		{
			File.Move(ImportFile.absolutePath, newAbsPath);
			JSRuntime.InvokeAsync<int>("closeEdit", Index);
			ImportFile.originalFilename = ImportFile.renamedFilename;
			ImportFile.shortPath = newShortPath;
			ImportFile.absolutePath = newAbsPath;
		}
		OnCheckClick.Invoke();
	}
	
	///Called when the check for an item is clicked, or when an item is clicked and Ctrl is down or there is at least 1 item selected. Toggles that item's check, or multiple items if Shift is held down.
	private void CheckClicked(MouseEventArgs eventArgs)
	{
		ToggleCheck(ImportFile.uuid);

		//Get if Shift was held down when clicking the checkbox. Used for selecting multiple items.
		if (eventArgs.ShiftKey)
		{
			//First item is on left and item shift clicked is on the right. E.g., ###1####2### Loop from 1 --> 2, and add stuff in between to selectedItems.
			if (Import.lastCheckedIndex < Index)
				AddSelected(Import.lastCheckedIndex, Index);
			else if (Import.lastCheckedIndex > Index) //Same as above but swap 1 and 2 and the direction.
				AddSelected(Index, Import.lastCheckedIndex);
		}
		else
		{
			Import.lastCheckedIndex = Index;
		}
		OnCheckClick.Invoke();
		
		//Modifies a checkmark's CSS class to show if checked/unchecked, and adds/removes the uuid from selectedItems.
		void ToggleCheck(Guid uuid)
		{
			if (Import.selectedItems.Contains(uuid))
				Import.selectedItems.Remove(uuid);
			else if (!Import.selectedItems.Contains(uuid))
				Import.selectedItems.Add(uuid);
		}
	
		//Add items from start to end into selectedItems. Used for Shift Click.
		void AddSelected(int startIndex, int endIndex)
		{
			for (int i = startIndex; i <= endIndex; i++)
			{
				if (!Import.selectedItems.Contains(Import.importFiles[i].uuid))
					Import.selectedItems.Add(Import.importFiles[i].uuid);
			}
		}
	}
}
