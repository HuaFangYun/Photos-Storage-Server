@*
Component used in Index, Starred, AlbumView, and Trash for displaying items in the PSS library in small chunks at a time, as well as other shared behavior like showing prompts when deleting items, etc.
More content is added when mouse enters the top or bottom of the screen, as long as there is more content with date taken before/after the content already loaded.
The default amount of items loaded at a time is 50.
If it can't find any content, it shows an h1 saying no content.
*@

@* https://code-maze.com/how-to-call-javascript-code-from-net-blazor-webassembly/ *@
@inject IJSRuntime JSRuntime

<link href="/css/components/LibraryContentViewer.css" rel="stylesheet">

@if (SelectedItem != Guid.Empty)
{
	Console.WriteLine("hello lmao"); //TODO
}
else if (MediaList.Count == 0)
{
	<h1>Upload some items to get started</h1>
}
else
{
	<div id="libContentViewer">
		<div id="moreContentTopDiv" style="visibility: @moreContentTopDivVis" @onmouseover="@AddContentTop" @onscroll="@AddContentTop" @onmousewheel="@AddContentTop" @onpointerenter="@AddContentTop" @ontouchenter="@AddContentTop"></div>
		@for (int i = 0; i < MediaList.Count; i++)
		{
			C.MediaRow media = MediaList[i];
			
			<div class="thumbnail">
				@if (media.starred) {<span class="material-icons-outlined star-icon">star</span>}
				<span @onclick="@(mouseEventArgs => CheckClicked(media.uuid, mouseEventArgs))" title="@i" id="@media.uuid" class="material-icons checkbox unchecked">check_circle</span>
				@if (media.thumbnail != null) //Video
				{
					<span class="material-icons-outlined video-icon">play_circle_outline</span>
					<img @onclick="@(mouseEventArgs => ImgClicked(media.uuid, mouseEventArgs))" src="data:image/jpg;base64,@media.thumbnail" alt="@S.LIB_REQUEST_PATH/@media.path" loading="lazy"/>
				}
				else
				{
					<img @onclick="@(mouseEventArgs => ImgClicked(media.uuid, mouseEventArgs))" src="@S.LIB_REQUEST_PATH/@media.path" alt="@S.LIB_REQUEST_PATH/@media.path" loading="lazy"/>
				}
			</div>
		}
		<div id="moreContentBottomDiv" style="visibility: @moreContentBottomDivVis" @onmouseover="@AddContentBottom" @onscroll="@AddContentBottom" @onmousewheel="@AddContentBottom" @onpointerenter="@AddContentBottom" @ontouchenter="@AddContentBottom"></div>
	</div>
}

@code{

	///Stores all content loaded.
	public static List<C.MediaRow> MediaList { get; private set; }

	///A single item for viewing.
	private Guid SelectedItem
	{
		get => _selectedItem;
		set
		{
			_selectedItem = value;
			StateHasChanged();
		}
	}
	private static Guid _selectedItem;

	///Stores all items user has selected.
	public List<Guid> SelectedItems { get; private set; }

	///Stores the index in MediaList of the last item that was checked. Used for Shift-clicking to select multiple items.
	private static int lastCheckedIndex;
	
	///Used to control the visibility of the header element, if there is one. 
	[Parameter]
	public string HeaderVis { get; set; }
	
	///Used for binding HeaderVis
	[Parameter]
	public EventCallback<string> HeaderVisChanged { get; set; }
	
	///Gets how many items are selected. Page using this component needs to bind this so it's properly rendered in the &lt;header&gt;.
	[Parameter]
	public int SelectedItemsCount { get; set; }

	///Used for binding SelectedItemsCount.
	[Parameter]
	public EventCallback<int> SelectedItemsCountChanged { get; set; }

	///The query only used to select data on first page load. The query MUST SELECT these columns in this exact order: path, date_taken, date_added, starred, uuid, thumbnail.
	[Parameter, EditorRequired]
	public string NullDTQuery { get; set; }
	
	///The query used to select add more content to the top of the page. The query MUST SELECT these columns in this exact order: path, date_taken, date_added, starred, uuid, thumbnail.
	[Parameter, EditorRequired]
	public string NotNullDTQueryTop { get; set; }
	
	///The query used to select add more content to the bottom of the page. The query MUST SELECT these columns in this exact order: path, date_taken, date_added, starred, uuid, thumbnail.
	[Parameter, EditorRequired]
	public string NotNullDTQueryBottom { get; set; }
	
	private static DateTime? oldestDT, newestDT;

	private static string moreContentTopDivVis, moreContentBottomDivVis;
}

@functions{

	protected override void OnInitialized()
	{
		MediaList = new List<C.MediaRow>(150);
		SelectedItems = new List<Guid>(150);
		oldestDT = newestDT = null;
		AddContent(NullDTQuery, null, ref oldestDT, ref moreContentBottomDivVis);
		moreContentTopDivVis = moreContentBottomDivVis = "visible";
	}
	
	///Modifies a checkmark's CSS class to show if checked/unchecked, and adds/removes the uuid from SelectedItems.
	private async Task ToggleCheck(Guid uuid)
	{
		string newClass = await JSRuntime.InvokeAsync<string>("toggleCheck", uuid);
		if (newClass.Contains("unchecked")) //No longer selected.
		{
			SelectedItems.Remove(uuid);
			await SelectedItemsCountChanged.InvokeAsync(SelectedItems.Count);
		}
		else if (!SelectedItems.Contains(uuid)) //Needed to prevent adding dupes when shift clicking. TODO: create a hashSet for storing uuids as well so this would be way faster.
		{
			SelectedItems.Add(uuid);
			await SelectedItemsCountChanged.InvokeAsync(SelectedItems.Count);
		}
	}

	///<summary>Adds content either to the front or back of MediaList.</summary>
	///<param name="nullDTQuery">The query to be used when oldestOrNewestDT is null. This is used when the page is first loaded.</param>
	///<param name="notNullDTQuery">The query to be used when oldestOrNewestDT is NOT null. This is used after the page has content and needs more either at the top or bottom of the page. Use &lt; for getting content older than the oldest DT, and &gt; for getting content newer than the newest DT.</param>
	///<param name="oldestOrNewestDT">The DateTime tracking the oldest or newest DT so far, for adding more content.</param>
	///<param name="divVis">The variable controlling the visibility of the div for adding more content.</param>
	///<remarks>The query MUST SELECT these columns in this exact order: path, date_taken, date_added, starred, uuid, thumbnail.</remarks>
	private static void AddContent(string nullDTQuery, string notNullDTQuery, ref DateTime? oldestOrNewestDT, ref string divVis)
	{
		try
		{
			C.Open();
			using NpgsqlCommand cmd = new(null, C.connection);
			if (oldestOrNewestDT == null) //Only possible when page first loads and there's no content yet.
			{
				cmd.CommandText = nullDTQuery;
			}
			else
			{
				cmd.CommandText = notNullDTQuery;
				cmd.Parameters.AddWithValue("@oldestOrNewestDT", oldestOrNewestDT);
			}
			cmd.ExecuteNonQuery();
			using NpgsqlDataReader r = cmd.ExecuteReader();

			//If there is no more content available to display, hide the div so user can click through it to click any items below the div.
			if (!r.HasRows) divVis = "hidden";

			while (r.Read()) MediaList.Add(new C.MediaRow(r.GetString(0), r.IsDBNull(1) ? null : r.GetDateTime(1), r.GetDateTime(2), r.GetBoolean(3), r.GetGuid(4), r.IsDBNull(5) ? null : r.GetString(5)));
			r.Close();
			oldestDT = MediaList.Last().dateTaken;
		}
		catch (NpgsqlException e)
		{
			Console.WriteLine(e);
		}
		finally
		{
			C.Close();
		}
	}
	
	///Adds content to the front of MediaList when user hovers over top of page after using Ctrl G.
	private void AddContentTop() => AddContent(NullDTQuery, NotNullDTQueryTop, ref newestDT, ref moreContentTopDivVis);

	///Adds content to the end of MediaList when user hovers over bottom of page.
	private void AddContentBottom() => AddContent(NullDTQuery, NotNullDTQueryBottom, ref oldestDT, ref moreContentBottomDivVis);

	///Called when the check for an item is clicked, or when an item is clicked and Ctrl is down or there is at least 1 item selected. Toggles that item's check, or multiple items if Shift is held down.
	private async Task CheckClicked(Guid uuid, MouseEventArgs eventArgs)
	{
		await ToggleCheck(uuid);
		int thisIndex = Int32.Parse(await JSRuntime.InvokeAsync<string>("getTitle", uuid));
		await HeaderVisChanged.InvokeAsync(SelectedItems.Count > 0 ? "visible" : "hidden");

		//Get if Shift was held down when clicking the checkbox. Used for selecting multiple items.
		if (eventArgs.ShiftKey)
		{
			//First item is on left and item shift clicked is on the right. E.g., ###1####2### Loop from 1 --> 2, and add stuff in between to SelectedItems.
			if (lastCheckedIndex < thisIndex)
				await AddSelected(lastCheckedIndex, thisIndex);
			else if (lastCheckedIndex > thisIndex) //Same as above but swap 1 and 2 and the direction.
				await AddSelected(thisIndex, lastCheckedIndex);
		}
		else
		{
			lastCheckedIndex = thisIndex;
		}
	
		//Add items from start to end into SelectedItems. Used for Shift Click.
		async Task AddSelected(int startIndex, int endIndex)
		{
			for (int i = startIndex; i <= endIndex; i++)
			{
				Guid currentID = MediaList[i].uuid;
				if (SelectedItems.Contains(currentID)) continue;
				// SelectedItems.Add(currentID); //TODO: is this needed?
				await ToggleCheck(currentID);
			}
		}
	}
	
	///Called when an &lt;img/&gt; is clicked. Either checks this item, or shows it in fullscreen.
	private async Task ImgClicked(Guid uuid, MouseEventArgs eventArgs)
	{
		if (SelectedItems.Count > 0 || eventArgs.CtrlKey)
			await CheckClicked(uuid, eventArgs);
		else
			SelectedItem = uuid; //Show this item in fullscreen.
	}
	
	private async Task ClearChecks() //TODO: how to call this when <header> clear button is clicked? Action parameter?
	{
		foreach (Guid item in SelectedItems)
			await JSRuntime.InvokeAsync<string>("removeCheck", item);
		SelectedItems.Clear();
		await HeaderVisChanged.InvokeAsync("hidden");
		// albumsVis = "hidden"; //TODO
		// choiceVis = "hidden";
	}
	
	private void DeleteBtnClick() //TODO: how to call this when header delete button is clicked?
	{
		if (S.showPrompts == false)
		{
			DeleteSelected();
			return;
		}
		// choiceVis = "visible"; //TODO
		// choiceMsg = SelectedItems.Count > 1 ? "Delete Selected Items?" : "Delete Selected Item?";
	}

	///Deletes all selected items.
	private async void DeleteSelected()
	{
		foreach (Guid item in SelectedItems) //https://stackoverflow.com/a/604843
		{
			C.MoveToTrash(item);
			await HeaderVisChanged.InvokeAsync("hidden");
		}
		await ClearChecks();
		// MediaList = C.LoadMediaTable(); //TODO
		StateHasChanged();
	}
}