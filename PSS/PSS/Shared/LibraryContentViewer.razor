@*
Component used in Index, Starred, AlbumView, and Trash for displaying items in the PSS library in small chunks at a time.
More content is added when mouse enters the top or bottom of the screen.
The default amount of items loaded at a time is 50.
If it can't find any content, it shows an h1 saying no content.
*@

@* https://code-maze.com/how-to-call-javascript-code-from-net-blazor-webassembly/ *@
@inject IJSRuntime JSRuntime

<link href="/css/components/LibraryContentViewer.css" rel="stylesheet">

@if (SelectedItem != Guid.Empty)
{
	Console.WriteLine("hello lmao"); //TODO
}
else if (mediaList.Count == 0)
{
	<h1>Upload some items to get started</h1>
}
else
{
	<div id="mainDiv">
		@for (int i = 0; i < mediaList.Count; i++)
		{
			C.MediaRow media = mediaList[i];
			
			<div class="thumbnail">
				@if (media.starred) {<span class="material-icons-outlined star-icon">star</span>}
				<span @onclick="@(() => CheckClicked(new MouseEventArgs(), media.uuid))" title="@i" id="@media.uuid" class="material-icons checkbox unchecked">check_circle</span>
				@if (media.thumbnail != null) //Video
				{
					<span class="material-icons-outlined video-icon">play_circle_outline</span>
					<img @onclick="@(() => ImgClicked(new MouseEventArgs(), media.uuid))" src="data:image/jpg;base64,@media.thumbnail" alt="@S.LIB_REQUEST_PATH/@media.path" loading="lazy"/>
				}
				else
				{
					<img @onclick="@(() => ImgClicked(new MouseEventArgs(), media.uuid))" src="@S.LIB_REQUEST_PATH/@media.path" alt="@S.LIB_REQUEST_PATH/@media.path" loading="lazy"/>
				}
			</div>
		}
	</div>
}

@code{

	///Stores all content loaded.
	private static List<C.MediaRow> mediaList;

	///A single item for viewing.
	private Guid SelectedItem
	{
		get => _selectedItem;
		set
		{
			_selectedItem = value;
			StateHasChanged();
		}
	}
	private static Guid _selectedItem;

	///Stores all items user has selected.
	private static List<Guid> selectedItems;

	///Stores the index in mediaList of the last item that was checked. Used for Shift-clicking to select multiple items.
	private static int lastCheckedIndex;
	
	///Used to control the visibility of the header element, if there is one. 
	[Parameter]
	public static string HeaderVis { get; set; }
	
	// TODO ///Used for binding HeaderVis
	// [Parameter]
	// public EventCallback<string> HeaderVisChanged { get; set; }

}

@functions{

	protected override void OnInitialized()
	{
		mediaList = new List<C.MediaRow>(150);
		selectedItems = new List<Guid>(150);
	}
	
	///Modifies a checkmark's CSS class to show if checked/unchecked, and adds/removes the uuid from selectedItems.
	private async Task ToggleCheck(Guid guid)
	{
		string newClass = await JSRuntime.InvokeAsync<string>("toggleCheck", guid);
		if (newClass.Contains("unchecked")) selectedItems.Remove(guid); //No longer selected.
		else if (!selectedItems.Contains(guid)) selectedItems.Add(guid); //Needed to prevent adding dupes when shift clicking. TODO: create a hashSet for storing uuids as well so this would be way faster.
	}

	///Called when the check for an item is clicked. Toggles that item's check, or multiple items if Shift is held down.
	private async Task CheckClicked(MouseEventArgs eventArgs, Guid uuid)
	{
		await ToggleCheck(uuid);
		int thisIndex = Int32.Parse(await JSRuntime.InvokeAsync<string>($"document.getElementById('{uuid}').getAttribute('title')")); //TODO: idk if this will work. Might have to make a js func.
		HeaderVis = selectedItems.Count > 0 ? "visible" : "hidden";

		//Get if Shift was held down when clicking the checkbox. Used for selecting multiple items.
		if (eventArgs.ShiftKey)
		{
			//First item is on left and item shift clicked is on the right. E.g., ###1####2### Loop from 1 --> 2, and add stuff in between to selectedItems.
			if (lastCheckedIndex < thisIndex)
				await AddSelected(lastCheckedIndex, thisIndex);
			else if (lastCheckedIndex > thisIndex) //Same as above but swap 1 and 2 and the direction.
				await AddSelected(thisIndex, lastCheckedIndex);
		}
		else
		{
			lastCheckedIndex = thisIndex;
		}
		
		//Add items from start to end into selectedItems. Used for Shift Click.
		async Task AddSelected(int startIndex, int endIndex)
		{
			for (int i = startIndex; i <= endIndex; i++)
			{
				Guid currentID = mediaList[i].uuid;
				if (selectedItems.Contains(currentID)) continue;
				// selectedItems.Add(currentID); //TODO: is this needed?
				await ToggleCheck(currentID);
			}
		}
	}
	
	private static void ImgClicked(MouseEventArgs eventArgs, Guid uuid)
	{
		
	}
}